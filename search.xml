<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2018/02/26/2017-10-07-raw/"/>
      <content type="html"><![CDATA[<h1 id="raw-暂定每次集中一点小的想法，最后花时间再重整"><a href="#raw-暂定每次集中一点小的想法，最后花时间再重整" class="headerlink" title="raw 暂定每次集中一点小的想法，最后花时间再重整"></a>raw 暂定每次集中一点小的想法，最后花时间再重整</h1><blockquote><p>我觉得这样才是最好的方案，高中时期我在写一些数学专题的时候就遇到了这样的问题–你的文章要么只能专注于一些特殊情况的解释和介绍，要么只能很泛泛而谈的介绍一些大家都懂的知识体系形状的东西。市面上的参考书就是如此，导致大家一眼看过去，内容标题都一致的不行，甚至你已经知道内容是什么，但是这个知识你真的完全掌握了吗？导致这个问题的原因在于，我们在很多时候，习惯将文字从知识出发，而不是从问题。<br>js的奇异的东西接触久了，你往往不记得自己一开始是怎么想的了。</p></blockquote><h2 id="专题作用域，变量等"><a href="#专题作用域，变量等" class="headerlink" title="专题作用域，变量等"></a>专题作用域，变量等</h2><h2 id="编译期"><a href="#编译期" class="headerlink" title="编译期"></a>编译期</h2><p>JavaScript虽然是解释型语言，但是确确实实存在“编译期”这样的代码之前前的阶段存在的，面试题熟知的各种变量和函数提升，词法作用域形成，都是在这个编译期中形成的。<br>这里意在能解释清楚在代码执行前的这段时期中引擎的工作流程顺序。</p><p>题外说一句，希望你可以先很简单的整理出自己原本的想法，原本的想法很重要，我们需要知道“直觉”是怎么形成，从而才能发现一些“反直觉”的源头所在。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo1 = <span class="function"><span class="keyword">function</span> <span class="title">myfun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo1'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo1();  <span class="comment">// foo1</span></span><br><span class="line">foo2();  <span class="comment">// foo2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo2'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfun</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="comment">//var a = 1;</span></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">myfun(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>大家应该都知道foo2能正常执行，而不是按着“顺序”，是因为发生了函数提升。</p><h3 id="执行上下文栈（execution-context"><a href="#执行上下文栈（execution-context" class="headerlink" title="执行上下文栈（execution context)"></a>执行上下文栈（execution context)</h3><p>这是关于this的重要内容<br>JavaScript引擎在对代码进行执行的时候，会创建一个执行上下文栈，用于管理执行过程中发生的各种情况。</p><p><a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">JavaScript深入之执行上下文栈 #4</a></p><h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><p>提升不是一个技术名词，提升只是为了更直观理解的最终现象。<br>【创建】<br>词法阶段按顺序找到词法关键词<br>【初始化】<br>【执行代码-赋值】</p><p>文章的总结<br>1.var会在代码执行前进行创建和初始化<br>2.function会在代码执行前创建和初始化并赋值<br>3.let会在代码执行前进行创建，但是不初始化，所以“提升”使用会ReferenceError</p><p>–<br>let 的「创建」过程被提升了，但是初始化没有提升。<br>var 的「创建」和「初始化」都被提升了。<br>function 的「创建」「初始化」和「赋值」都被提升了。<br>const，其实 const 和 let 只有一个区别，那就是 const 只有「创建」和「初始化」，没有「赋值」过程。</p><p>–<br>这个问题说明：如果 let x 的初始化过程失败了，那么</p><p>x 变量就将永远处于 created 状态。<br>你无法再次对 x 进行初始化（初始化只有一次机会，而那次机会你失败了）。<br>由于 x 无法被初始化，所以 x 永远处在暂时死区（也就是盗梦空间里的 limbo）！</p><blockquote><p>就是只有创建，没有初始化，所以既无法赋值，无法初始化，又无法再覆盖创建</p></blockquote><p>## </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包延长引用产生影响</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</span><br><span class="line"><span class="comment">// 函数参数按值传递</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;  <span class="comment">// j = i</span></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, j);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 let的问题</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</span><br></pre></td></tr></table></figure><blockquote><p>妈的智障，我不知道看到多少篇文章都在引用这个例子来介绍闭包，然后一口说这个是用闭包来解决问题。<br>IIFE只是一种函数的便捷写法，跟我读一次：使用函数参数按值传递（重新创建环境）来解决闭包(词法作用域延迟)引起的变量没有按预期保存的问题</p></blockquote><p><a href="https://juejin.im/post/58cf180b0ce4630057d6727c?utm_source=gold_browser_extension" target="_blank" rel="noopener">80% 应聘者都不及格的 JS 面试题</a><br><a href="https://zhuanlan.zhihu.com/p/28140450" target="_blank" rel="noopener">我花了两个月时间才理解let</a></p><ul><li>for循环<br>我简单说，for循环内部Let，设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</li><li>变量提升</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/02/26/2017-01-01-(raw)%E8%AF%AD%E6%B3%95/"/>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/02/26/hello-world/"/>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>事件循环EventLoop</title>
      <link href="/2018/02/25/2018-02-25-JavaScript%E4%B8%AD%E5%8F%98%E9%87%8F%E3%80%81%E5%80%BC%E3%80%81%E5%BC%95%E7%94%A8%EF%BC%882%EF%BC%89/"/>
      <content type="html"><![CDATA[<h1 id="习以为常的使用"><a href="#习以为常的使用" class="headerlink" title="习以为常的使用"></a>习以为常的使用</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b++</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'=====split====='</span>)</span><br><span class="line"><span class="keyword">var</span> c = &#123; <span class="attr">name</span>: <span class="string">'jack'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> d = c</span><br><span class="line">d.name = <span class="string">'peter'</span></span><br><span class="line">d = &#123; <span class="attr">name</span>: <span class="string">'Bob'</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(c)</span><br><span class="line"><span class="built_in">console</span>.log(d)</span><br></pre></td></tr></table></figure><p>我们先来说上次留下的这道基础的题目<br>如果说要给标准答案的话：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ node value1.js</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">=====split=====</span><br><span class="line">&#123; name: <span class="string">'peter'</span> &#125;</span><br><span class="line">&#123; name: <span class="string">'Bob'</span> &#125;</span><br></pre></td></tr></table></figure></p><p>也就是面试知识点中总结的，也是我上一篇稍微说的值传递的分类</p><p>// todo 待补充<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先 变量声明赋值因为提升，所以变量总是先声明后赋值</span><br></pre></td></tr></table></figure></p><p>var a<br>a = 1<br><code>`</code><br>&lt;!– 下面的说法是比较个人的理解：<br>var a 会LHS访问作用域，是否存在相同变量，如果存在则忽略当前声明<br>a = 1 会LHS访问作用域寻找a，不关心a当前的值是多少，只想找到=2的赋值目标<br>跳过部分<br>b = a 会LHS寻找b,RHS寻找a<br><strong>关键</strong></p><ul><li>LHS是使用变量名找到地址</li><li>RHS是使用变量名找到地址，再通过地址再去找到具体值<br>我们说某某变量存了什么值<br>往往是指RHS的结果<br>比如console.log(b),就是对b进行RHS查询<br>也就是RHS的查询我们也可以理解为LHS也是可以相当于其中一步</li><li><strong> 赋值的操作都是地址的传递,基本值和复合值的区别只在存放的位置 </strong><br>d.name = ‘peter’的核心是寻址LHS –&gt;</li></ul><p>待续写，这里会分开一篇文章写RHS</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入系列 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>事件循环EventLoop</title>
      <link href="/2018/02/25/2018-02-25-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/"/>
      <content type="html"><![CDATA[<p>这是摘要<br>本文为个人学习记录<br>没有什么参考价值，源自一篇大牛的文章<br><a href="https://github.com/dwqs/blog/issues/61" target="_blank" rel="noopener">https://github.com/dwqs/blog/issues/61</a></p><a id="more"></a><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">t</span> =&gt;</span> <span class="built_in">console</span>.log(t));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>我的猜测是<br>3421<br>原因也很直接，promise异步设计的Then本意就是在执行完成回调以后。<br>这个执行完成中除了包括后面函数的执行<br>而Promise.resolve()这种似乎像是SetTimeout(cb,0)的用法<br>就让他先执行吧<br>~尴尬的是结果是<br>4321</p><p>emmmmm…其实我就是什么都没懂<br>我们一起来重新预习一遍吧</p><h2 id="事件循环回顾"><a href="#事件循环回顾" class="headerlink" title="事件循环回顾"></a>事件循环回顾</h2><ul><li>事件循环EventLoop是通过任务队列TaskQueue的机制来进行协调的</li><li>在同一个事件循环中，可以有不止一个任务队列</li><li>每个任务都有一个任务源task source ，源自同一个任务源的Task必须放在同一个任务队列</li><li><p>在事件循环中，每进行一次循环操作成为Tick</p><h3 id="每一次Tick中任务的处理模型的关键步骤"><a href="#每一次Tick中任务的处理模型的关键步骤" class="headerlink" title="每一次Tick中任务的处理模型的关键步骤"></a>每一次Tick中任务的处理模型的关键步骤</h3></li><li><p>在本次Tick中最先进入队列的任务（oldest task）,如果有则执行（我这里理解的是上一次遗留下来的任务，他在tick中最先进入）</p></li><li>检查是否存在MicroTasks，如果存在则不停执行MicroTask，直到清空 Microtasks Queue</li><li>更新render</li><li>主线程重复执行上面的步骤</li></ul><h3 id="task-microtask"><a href="#task-microtask" class="headerlink" title="task,microtask"></a>task,microtask</h3><p>在ES2015中 microtask又被称为Job</p><ul><li>(macro)task主要包含：script(整体代码)、setTimeout、setInterval、I/O、UI交互事件、setImmediate(Node.js 环境)</li><li>microtask主要包含：Promise、MutaionObserver、process.nextTick(Node.js 环境)</li></ul><blockquote><p>在 Node 中，会优先清空 next tick queue，即通过process.nextTick 注册的函数，再清空 other queue，常见的如Promise；此外，timers(setTimeout/setInterval) 会优先于 setImmediate 执行，因为前者在 timer 阶段执行，后者在 check 阶段执行。</p></blockquote>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入系列 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue 源码 阅读1</title>
      <link href="/2017/10/16/2017-10-16-vue%E6%8E%A2%E7%A9%B6/"/>
      <content type="html"><![CDATA[<h1 id="vue-源码以及相关细节分析"><a href="#vue-源码以及相关细节分析" class="headerlink" title="vue 源码以及相关细节分析"></a>vue 源码以及相关细节分析</h1><blockquote><p>这块属于踩在巨人的肩膀上,这里就只做笔记。只做一些概括性的说法，具体看的过程会在代码进行注释</p></blockquote><h2 id="入口实例挂载"><a href="#入口实例挂载" class="headerlink" title="入口实例挂载"></a>入口实例挂载</h2><p>1.花了不少时间去了解TypeScript<br>2.今天主要了解了整个流程的过程，这个和官网之前说的挂载顺序是一致的。（beforeCreated,stateInit(props,methods,data,computed,watch),created,render）<br>=&gt;&gt;&gt;<br>将入口options初始化到各个部分<br>从_init挂载入口开始<br>=&gt;&gt;&gt;<br>使用typeScript书写,很多类型做了对应的限制</p><h2 id="initMixin"><a href="#initMixin" class="headerlink" title="initMixin"></a>initMixin</h2><h3 id="补充-gt-事件机制"><a href="#补充-gt-事件机制" class="headerlink" title="补充&gt;事件机制"></a>补充&gt;事件机制</h3><p>正常的emmitter实现，应该说没有什么特别需要注意的地方，可以作为一个比较好的标准示例~</p><h2 id="stateMixin"><a href="#stateMixin" class="headerlink" title="stateMixin"></a>stateMixin</h2><p>涉及到整个vm的数据初始化<br>另外提供了一个快捷的代理，能让vm的数据接口能方便的访问和修改</p><h2 id="数据绑定初始化以及异步更新"><a href="#数据绑定初始化以及异步更新" class="headerlink" title="数据绑定初始化以及异步更新"></a>数据绑定初始化以及异步更新</h2><p>1.依赖收集</p><h2 id="Vnode的节点"><a href="#Vnode的节点" class="headerlink" title="Vnode的节点"></a>Vnode的节点</h2><h2 id="Virtual-DOM-以及-diff实现"><a href="#Virtual-DOM-以及-diff实现" class="headerlink" title="Virtual DOM 以及 diff实现"></a>Virtual DOM 以及 diff实现</h2><h2 id="template编译"><a href="#template编译" class="headerlink" title="template编译"></a>template编译</h2><p><a href="https://github.com/answershuto/learnVue" target="_blank" rel="noopener">learnVue</a><br><a href="http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">Vue2.1.7源码学习</a></p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 深入系列 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
