<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2018/02/28/2017-09-28-html%E7%9B%AE%E5%BD%95/"/>
      <content type="html"><![CDATA[<h1 id="HTML-目录"><a href="#HTML-目录" class="headerlink" title="HTML 目录"></a>HTML 目录</h1><blockquote><p>语言的本质是表述信息，HTML在摆脱XML的影子后越来越丰满</p></blockquote><h2 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h2><p>语法 &amp; 语义<br>!DOCTYPE HTML 文档标准<br>怪异模式<br>标准模式<br>head<br>meta 元数据标签<br>网页描述<br>设备描述<br>HTTP 请求描述<br>HTTP Client Hints<br>body<br>装饰型标记（不推荐、部分已废弃）<br>功能型标记<br>无语义容器（div、span）</p><h3 id="用户交互（交互型标记）"><a href="#用户交互（交互型标记）" class="headerlink" title="用户交互（交互型标记）"></a>用户交互（交互型标记）</h3><p>输入框<br>选择器<br>多选框<br>单选框<br>按钮<br>数据可视化（展示型标记）<br>列表<br>定义列表<br>无序列表<br>有序列表<br>表格<br>结构化数据标记、微数据<br>多媒体<br>图片<br>视频<br>音频<br>SVG、Canvas<br>文章（正文、摘要、段落、章节、前言、结语、引用）<br>规范<br>标签类型</p><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p>HTML 代码规范<br>HTML 使用规范（标签嵌套规则）<br>可访问性、无障碍体验</p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>图片空 src 导致页面加载两次<br>iframe 空 src 导致无限循环加载本页面</p><h3 id="HTML与DOM"><a href="#HTML与DOM" class="headerlink" title="HTML与DOM"></a>HTML与DOM</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/02/28/2017-09-28-CSS%E7%9B%AE%E5%BD%95/"/>
      <content type="html"><![CDATA[<h1 id="系列部分-CSS-知识点–-基础原理部分"><a href="#系列部分-CSS-知识点–-基础原理部分" class="headerlink" title="系列部分 CSS 知识点– 基础原理部分"></a>系列部分 CSS 知识点– 基础原理部分</h1><blockquote><p>吃土小2叉：用设计师的思维去理解 CSS，用程序员的思维去写 CSS<br>我也来补充一下好了：用设计去理解，用代码去渲染。其实这句话和上面是一样的哈，我强行当自己的，意思也很直白，你写出来的东西不应该要渲染才能知道什么，你对设计的感觉应该是符合CSS一些原理本身的基础的。</p></blockquote><h2 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h2><blockquote><p>这里只补充易混点</p></blockquote><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li>基础选择器</li><li>组合选择器</li><li>伪类选择器</li><li>媒体查询</li><li>简写属性</li><li>注释</li><li>属性运算 calc()</li><li>权重（优先级）</li></ul><h3 id="1-层叠原理以及预编译Less等"><a href="#1-层叠原理以及预编译Less等" class="headerlink" title="1.层叠原理以及预编译Less等"></a>1.层叠原理以及预编译Less等</h3><p>作用域<br>封装（mixins）<br>组合（mixins+）<br>扩展（:extend）<br>继承（mixins）<br>CSS 变量、Less 变量<br>模块化（import）</p><h2 id="规范（编写可读性良好的-CSS）"><a href="#规范（编写可读性良好的-CSS）" class="headerlink" title="规范（编写可读性良好的 CSS）"></a>规范（编写可读性良好的 CSS）</h2><p>权限控制<br>最佳实践<br>不良习惯<br>格式规范<br>风格<br>复用<br>BEM 规范<br>逻辑特性（在 CSS / Less 中运用 OO 思想和设计模式）</p><h3 id="2-布局原理，文档流，定位"><a href="#2-布局原理，文档流，定位" class="headerlink" title="2.布局原理，文档流，定位"></a>2.布局原理，文档流，定位</h3><p>视觉设计（单一状态设计）<br>布局（分久必合、合久必分）<br>盒模型（高度、宽度、边框、外边距、内边距、溢出控制）<br>定位方式<br>层叠上下文（z-index）<br>display 类型（table、inline、inline-block、block、flex、grid）<br>浮动<br>文本（删除线、下划线、斜体、粗细、字号）<br>段落（行高、缩进、断句方式、换行方式）<br>对齐<br>方向</p><h3 id="装饰、动画、颜色等补充"><a href="#装饰、动画、颜色等补充" class="headerlink" title="装饰、动画、颜色等补充"></a>装饰、动画、颜色等补充</h3><p>颜色<br>背景<br>边框（border、outline）<br>圆角<br>阴影<br>渐变<br>透明度<br>变形（旋转、缩放、矩阵变化）<br>交互设计（多状态设计）<br>hover 状态<br>结合 Javascript<br>CSS 动画<br>active、checked 状态<br>过渡效果<br>动画关键帧<br>动画（运动和静止是对立的统一）<br>反馈<br>引导<br>互动</p><h3 id="响应式多设备设计"><a href="#响应式多设备设计" class="headerlink" title="响应式多设备设计"></a>响应式多设备设计</h3><p>多设备设计<br>最小固定宽度布局<br>百分比布局<br>栅格布局、弹性布局<br>js + rem 方案（rpx）<br>媒体查询<br>响应式设计（多套代码，多种设备）<br>自适应设计（一套代码，多种设备）</p><p>##　扩展内容<br>transition “失效”？<br>z-index “失效”？<br>视觉还原度<br>调试技巧<br>属性“失效”问题<br>外边距合并<br>边框 1px 问题<br>垂直居中<br>大屏幕 rem 小屏幕 px<br>图片适配<br>可维护性<br>预处理器：Less、Sass<br>后处理器：postcss<br>小程序的 WXSS<br>Weex、RN 中的 CSS</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/02/28/2017-09-26-JavaScript%E7%9B%AE%E5%BD%95/"/>
      <content type="html"><![CDATA[<h1 id="Growth-Front-End-Knowledge-Summary"><a href="#Growth-Front-End-Knowledge-Summary" class="headerlink" title="Growth Front-End Knowledge Summary"></a>Growth Front-End Knowledge Summary</h1><blockquote><p>目录：探索自己的不足之处,更是,探索自己想要探索的方向（follow your heart).单凭自己一己之力当然也没有办法很好的做好,这里会站在前人的肩膀上.希望能通过这种方式,激发我与大家的一些对前端的思考.知识不一定总要学到100分,60分,20分,10分,都是收获,而不是不及格.</p></blockquote><h2 id="系列部分-JavaScript-知识点–-基础原理部分"><a href="#系列部分-JavaScript-知识点–-基础原理部分" class="headerlink" title="系列部分 JavaScript 知识点– 基础原理部分"></a>系列部分 JavaScript 知识点– 基础原理部分</h2><blockquote><p>雷锋推到雷锋塔，JavaScript作为一门是个程序员都敢说自己会的语言，在前端爆炸的今天，逐渐壮大和发展，自然有他的独到之处，有时候我们不应总盯着一些糟粕，更多的是去思考，为什么会这样设计。</p></blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="">环境,变量,作用域–没有编译?解释型语言？</a></li><li><a href="">类型,值,操作符,语句</a></li><li><a href="">this,闭包,垃圾回收</a></li><li><a href="">原型,类,继承,设计模式–面向对象？</a></li><li><a href="">引擎,ES标准历史,DOM树,重绘</a></li><li><a href="">事件,DOM事件流,浏览器DOM对象,表单</a></li><li><a href="">事件轮询,promise,异步编程,Ajax,跨域</a></li><li><a href="">补充,原生对象使用Array,RegExp,Json</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/02/28/2017-01-01-%E6%B7%B1%E5%85%A5%E7%B3%BB%E5%88%97-%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <content type="html"><![CDATA[<p>作用域是什么？<br><a id="more"></a></p><h2 id="1-1-编译原理"><a href="#1-1-编译原理" class="headerlink" title="1.1 编译原理"></a>1.1 编译原理</h2><p>JavaScript事实上是一门动态编译语言<br>所有执行的语句都需要编译，只是过程十分短暂。而且并不是提前编译的，也不能在分布式系统中进行移植，更像是一边执行一边编译。也是正因为如此（JavaScript引擎不会有大量的时间进行编译，也没有那么多时间进行优化。因为不是发生在构建之前），这种“编译”过程会掺杂很多优化。</p><p>传统的编译过程分为三个步骤：</p><ul><li>1.词法分析<br>对语句进行分词，按照一定的字符串组成规则。</li><li>2.解析、语法分析<br>将词法单元流转换成抽象语法树。</li><li>3.代码生成<br>将抽象语法树转换为可执行的代码</li></ul><p>JavaScript也是有类似的过程，但是会更加复杂。</p><h3 id="1-2理解作用域"><a href="#1-2理解作用域" class="headerlink" title="1.2理解作用域"></a>1.2理解作用域</h3><h4 id="关于javascript解析"><a href="#关于javascript解析" class="headerlink" title="关于javascript解析"></a>关于javascript解析</h4><p>3大角色</p><ul><li>1.编译器</li><li>2.引擎</li><li>3.作用域<br>这里将javascript定义为编译性质的语言，以一种极快的速度进行编译，然后运行。不像其他语言一样，采用编译后再运行。更类似于一边编译，一边运行。当然这也是传统定义中，解释型语言的样子了。</li></ul><h3 id="‘var-a-2-’一条简单语句的执行过程"><a href="#‘var-a-2-’一条简单语句的执行过程" class="headerlink" title="‘var a = 2;’一条简单语句的执行过程"></a>‘var a = 2;’一条简单语句的执行过程</h3><p>1.将语句进行词法分解，分解成词法单元，然后解析成为词法树。在这个过程中出错，则报出语法错误。<br>2.词法树编译，遇到var a<br>编译器会询问（搜索）作用域是否存在该名称的变量，如果存在，则忽略该声明，继续进行编译（词法树的继续展开）。否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为a<br>3.遇到a = 2 , 词法树的编译会为引擎生成运行时所需要的代码，这个代码需要处理这一个a = 2 的赋值操作。<br>4.引擎运行这段代码，首先会搜索当前作用域是否有a这个变量，如果是，引擎就会使用这个变量（注意一下，这里还真不一定说一定会有，详细见之前说的变量提升hosting问题），否则引擎会继续查找该变量。<br>如果找到了该变量，则继续赋值<br>如果找不到，则举手抛出一个异常</p><h3 id="关于以上说的编译器-引擎执行的对变量a的查找"><a href="#关于以上说的编译器-引擎执行的对变量a的查找" class="headerlink" title="关于以上说的编译器/引擎执行的对变量a的查找"></a>关于以上说的编译器/引擎执行的对变量a的查找</h3><p>在上述的例子中，引擎会为变量a使用LHS的查找<br>查找一共有两种方式<br>一种是LHS，另一种则是RHS<br>当变量出现在赋值操作的左侧时进行LHS查询，出现在右侧时进行RHS查询</p><p>大概可以这样理解<br>LHS是找到变量的地址<br>RHS则是找到变量的地址中存放的值。<br>RHS(retrieve his source value)取得他的源值<br><strong>只要是涉及到赋值操作，就一定会有LHS的左侧搜索，它也有可能是在隐式中发生</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p>上述代码中，除了foo()发生了RHS的foo值搜索以外，<br>还发生了a = 2 的隐式LHS的引用搜索，以及console对象的RHS对象值搜索</p><p>当然，在预编译过程中的function 函数声明，我现有的知识知道这和正常的var声明不一样。<br>事实上，函数声明是另外的一种方式进行编译的。<br>狗日的真复杂</p><h3 id="1-4异常"><a href="#1-4异常" class="headerlink" title="1.4异常"></a>1.4异常</h3><p>区分 referenceError异常和TypeError</p><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><blockquote><p>从所写的代码中挑选出一个片段，然后用函数声明对它进行包装，实际上就是把这些代码‘隐藏’了</p></blockquote><h1 id="hosting"><a href="#hosting" class="headerlink" title="hosting"></a>hosting</h1><p>我们来看看 var 声明的「创建、初始化和赋值」过程</p><p>假设有如下代码：</p><p>function fn(){<br>  var x = 1<br>  var y = 2<br>}<br>fn()<br>在执行 fn 时，会有以下过程（不完全）：</p><p>进入 fn，为 fn 创建一个环境。<br>找到 fn 中所有用 var 声明的变量，在这个环境中「创建」这些变量（即 x 和 y）。<br>将这些变量「初始化」为 undefined。<br>开始执行代码<br>x = 1 将 x 变量「赋值」为 1<br>y = 2 将 y 变量「赋值」为 2<br>也就是说 var 声明会在代码执行之前就将「创建变量，并将其初始化为 undefined」。</p><p>这就解释了为什么在 var x = 1 之前 console.log(x) 会得到 undefined。</p><blockquote></blockquote><p>看到这里，你应该明白了 let 到底有没有提升：</p><p>let 的「创建」过程被提升了，但是初始化没有提升。<br>var 的「创建」和「初始化」都被提升了。<br>function 的「创建」「初始化」和「赋值」都被提升了。</p><p>最后看 const，其实 const 和 let 只有一个区别，那就是 const 只有「创建」和「初始化」，没有「赋值」过程。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/02/28/2017-01-01-%E6%B3%9B%E5%89%8D%E7%AB%AF%E7%9B%AE%E5%BD%95/"/>
      <content type="html"><![CDATA[<h2 id="nodejs-部分"><a href="#nodejs-部分" class="headerlink" title="nodejs 部分"></a>nodejs 部分</h2><h2 id="系列部分-计算机基础补全"><a href="#系列部分-计算机基础补全" class="headerlink" title="系列部分 计算机基础补全"></a>系列部分 计算机基础补全</h2><ul><li>[JavaScript中数据结构]</li><li>[计算机网络TGP,HTTP]</li></ul><h2 id="系列部分-前端进阶实践"><a href="#系列部分-前端进阶实践" class="headerlink" title="系列部分 前端进阶实践"></a>系列部分 前端进阶实践</h2><blockquote><p>这部分,我基本没有希望做好,但是我还是把一些想法写了出来,以便自己变强大之后做好。</p></blockquote><ul><li>[自动化构建]</li><li>[测试,浏览器调试]</li><li>[主流框架基础实现]</li></ul><h3 id="文章编写提示记录"><a href="#文章编写提示记录" class="headerlink" title="文章编写提示记录"></a>文章编写提示记录</h3><ul><li>1.使用问题导向—请注意你的导入问题需要有“第一印象”的代表性</li><li>2.解释基础知识点</li><li>3.使用例子印证基础知识点</li><li>4.回答问题</li><li>5.举出一些更奇葩的例子和补充说明</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>事件循环EventLoop</title>
      <link href="/2018/02/25/2018-02-25-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/"/>
      <content type="html"><![CDATA[<p>这是摘要<br>本文为个人学习记录<br>没有什么参考价值，源自一篇大牛的文章<br><a href="https://github.com/dwqs/blog/issues/61" target="_blank" rel="noopener">https://github.com/dwqs/blog/issues/61</a></p><a id="more"></a><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">t</span> =&gt;</span> <span class="built_in">console</span>.log(t));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>我的猜测是<br>3421<br>原因也很直接，promise异步设计的Then本意就是在执行完成回调以后。<br>这个执行完成中除了包括后面函数的执行<br>而Promise.resolve()这种似乎像是SetTimeout(cb,0)的用法<br>就让他先执行吧<br>~尴尬的是结果是<br>4321</p><p>emmmmm…其实我就是什么都没懂<br>我们一起来重新预习一遍吧</p><h2 id="事件循环回顾"><a href="#事件循环回顾" class="headerlink" title="事件循环回顾"></a>事件循环回顾</h2><ul><li>事件循环EventLoop是通过任务队列TaskQueue的机制来进行协调的</li><li>在同一个事件循环中，可以有不止一个任务队列</li><li>每个任务都有一个任务源task source ，源自同一个任务源的Task必须放在同一个任务队列</li><li><p>在事件循环中，每进行一次循环操作成为Tick</p><h3 id="每一次Tick中任务的处理模型的关键步骤"><a href="#每一次Tick中任务的处理模型的关键步骤" class="headerlink" title="每一次Tick中任务的处理模型的关键步骤"></a>每一次Tick中任务的处理模型的关键步骤</h3></li><li><p>在本次Tick中最先进入队列的任务（oldest task）,如果有则执行（我这里理解的是上一次遗留下来的任务，他在tick中最先进入）</p></li><li>检查是否存在MicroTasks，如果存在则不停执行MicroTask，直到清空 Microtasks Queue</li><li>更新render</li><li>主线程重复执行上面的步骤</li></ul><h3 id="task-microtask"><a href="#task-microtask" class="headerlink" title="task,microtask"></a>task,microtask</h3><p>在ES2015中 microtask又被称为Job</p><ul><li>(macro)task主要包含：script(整体代码)、setTimeout、setInterval、I/O、UI交互事件、setImmediate(Node.js 环境)</li><li>microtask主要包含：Promise、MutaionObserver、process.nextTick(Node.js 环境)</li></ul><blockquote><p>在 Node 中，会优先清空 next tick queue，即通过process.nextTick 注册的函数，再清空 other queue，常见的如Promise；此外，timers(setTimeout/setInterval) 会优先于 setImmediate 执行，因为前者在 timer 阶段执行，后者在 check 阶段执行。</p></blockquote>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入系列 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue 源码 阅读1</title>
      <link href="/2017/10/16/2017-10-16-vue%E6%8E%A2%E7%A9%B6/"/>
      <content type="html"><![CDATA[<h1 id="vue-源码以及相关细节分析"><a href="#vue-源码以及相关细节分析" class="headerlink" title="vue 源码以及相关细节分析"></a>vue 源码以及相关细节分析</h1><blockquote><p>这块属于踩在巨人的肩膀上,这里就只做笔记。只做一些概括性的说法，具体看的过程会在代码进行注释</p></blockquote><h2 id="入口实例挂载"><a href="#入口实例挂载" class="headerlink" title="入口实例挂载"></a>入口实例挂载</h2><p>1.花了不少时间去了解TypeScript<br>2.今天主要了解了整个流程的过程，这个和官网之前说的挂载顺序是一致的。（beforeCreated,stateInit(props,methods,data,computed,watch),created,render）<br>=&gt;&gt;&gt;<br>将入口options初始化到各个部分<br>从_init挂载入口开始<br>=&gt;&gt;&gt;<br>使用typeScript书写,很多类型做了对应的限制</p><h2 id="initMixin"><a href="#initMixin" class="headerlink" title="initMixin"></a>initMixin</h2><h3 id="补充-gt-事件机制"><a href="#补充-gt-事件机制" class="headerlink" title="补充&gt;事件机制"></a>补充&gt;事件机制</h3><p>正常的emmitter实现，应该说没有什么特别需要注意的地方，可以作为一个比较好的标准示例~</p><h2 id="stateMixin"><a href="#stateMixin" class="headerlink" title="stateMixin"></a>stateMixin</h2><p>涉及到整个vm的数据初始化<br>另外提供了一个快捷的代理，能让vm的数据接口能方便的访问和修改</p><h2 id="数据绑定初始化以及异步更新"><a href="#数据绑定初始化以及异步更新" class="headerlink" title="数据绑定初始化以及异步更新"></a>数据绑定初始化以及异步更新</h2><p>1.依赖收集</p><h2 id="Vnode的节点"><a href="#Vnode的节点" class="headerlink" title="Vnode的节点"></a>Vnode的节点</h2><h2 id="Virtual-DOM-以及-diff实现"><a href="#Virtual-DOM-以及-diff实现" class="headerlink" title="Virtual DOM 以及 diff实现"></a>Virtual DOM 以及 diff实现</h2><h2 id="template编译"><a href="#template编译" class="headerlink" title="template编译"></a>template编译</h2><p><a href="https://github.com/answershuto/learnVue" target="_blank" rel="noopener">learnVue</a><br><a href="http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">Vue2.1.7源码学习</a></p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 深入系列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入JavaScript-类型和值-类型和值基础</title>
      <link href="/2017/01/01/2017-01-01-%E6%B7%B1%E5%85%A5-%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%80%BC-%E5%9F%BA%E7%A1%80/"/>
      <content type="html"><![CDATA[<h1 id="深入JavaScript-类型和值-第一部分"><a href="#深入JavaScript-类型和值-第一部分" class="headerlink" title="深入JavaScript-类型和值-第一部分"></a>深入JavaScript-类型和值-第一部分</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>只要是程序员都会的语言，JavaScript却总是惹人生厌，弱类型语言，天生长着一副满图坑的脸，他就像是恶魔，你越是逃避，越是侵蚀，只有真正了解他的特性才能很好的驯服。<br><strong> 2018 复习归档修正 </strong><br><strong>类型在于明确每个值的立场,让程序员清楚认识事物之间的区别</strong><br><strong>开发者对待类型不同，自然让引擎也应对待的不同</strong><br><a id="more"></a></p></blockquote><blockquote><p>程序引擎和开发者在对待42（数字）不同于他们对待“42”（字符串）时，会采用不同的方式，那么这两个值的类型就应当不同。<br>为什么课程设计程序中的学号id字段的类型是String而不是Int这样的数字类型？<br>学号的“数字感”，总让人第一时间就想到数字类型。后来我是这样解释的，学号不像是“数值”而更多的是一种“唯一标识”,犹如车牌号，各种楼层号。数值的主要作用是用来计算，即加减乘除。而学号顶多涉及到一个排序。（这只是一种理解方式）</p></blockquote><h2 id="JavaScript中7种内置类型"><a href="#JavaScript中7种内置类型" class="headerlink" title="JavaScript中7种内置类型"></a>JavaScript中7种内置类型</h2><ul><li>null</li><li>undefined</li><li>boolean</li><li>number</li><li>string</li><li>object</li><li>symbol</li></ul><h3 id="7种类型对应着7种typeof的返回方式"><a href="#7种类型对应着7种typeof的返回方式" class="headerlink" title="7种类型对应着7种typeof的返回方式"></a>7种类型对应着7种typeof的返回方式</h3><p><strong>注意并不是值和typeof运算值并不是完全相对应的</strong></p><ul><li>typeof null 属于历史遗留BUG，永远也不会修复。</li><li>function虽然不是类型，但是也能被typeof识别。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>     === <span class="string">"undefined"</span>; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>          === <span class="string">"boolean"</span>;   <span class="comment">// true</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">42</span>            === <span class="string">"number"</span>;    <span class="comment">// true</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">"42"</span>          === <span class="string">"string"</span>;    <span class="comment">// true</span></span><br><span class="line"><span class="keyword">typeof</span> &#123; <span class="attr">life</span>: <span class="number">42</span> &#125;  === <span class="string">"object"</span>;    <span class="comment">// true</span></span><br><span class="line"><span class="comment">// added in ES6!</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>()      === <span class="string">"symbol"</span>;    <span class="comment">// true</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> === <span class="string">"object"</span>; <span class="comment">// true </span></span><br><span class="line"><span class="comment">// typeof返回的第七个字符串</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* .. */</span> &#125; === <span class="string">"function"</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="弱类型是什么？"><a href="#弱类型是什么？" class="headerlink" title="弱类型是什么？"></a>弱类型是什么？</h2><p>在JavaScript中，变量没有类型，值才有类型。<br><strong>重复一次，变量没有类型，值才有类型。</strong><br>　　可以从某个很奇怪的角度说,这是弱变量,强类型。变量可以在任何时间保存任何类型的值，这似乎很好理解，但是这到底和其他强类型语言的区别在哪里？</p><blockquote><p>“类型强制访问控制（type enforcement），表现在引擎并不要求一个变量始终保持它的初始化值的类型。变量可以在一个赋值语句中保持string类型的值，在下一个赋值语句中又保持number的值。值42的类型时number，它的类型不能改变。另外一个值，“42”是string 类型。</p></blockquote><h2 id="对一个变量使用typeof，并不是在问这个变量是什么类型，而是在问这个变量中储存的值是什么类型。"><a href="#对一个变量使用typeof，并不是在问这个变量是什么类型，而是在问这个变量中储存的值是什么类型。" class="headerlink" title="对一个变量使用typeof，并不是在问这个变量是什么类型，而是在问这个变量中储存的值是什么类型。"></a>对一个变量使用typeof，并不是在问这个变量是什么类型，而是在问这个变量中储存的值是什么类型。</h2><p>后补充：这里在我后面文章值和引用中，提出了《你不知道的JavaScript》的的概念：<br>使用变量的时候本身是属于RHS 右值查询<br>而变量本身的声明和存在，则是 LHS 左变量搜索</p><h2 id="不谈转换，类型基础理解"><a href="#不谈转换，类型基础理解" class="headerlink" title="不谈转换，类型基础理解"></a>不谈转换，类型基础理解</h2><h3 id="undefined-和-null"><a href="#undefined-和-null" class="headerlink" title="undefined 和 null"></a>undefined 和 null</h3><p>首先要明白undefined是一个基本内置类型，明白这一点后，就可以更好的去明白和undeclared的区别</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a; <span class="comment">// undefined</span></span><br><span class="line">b; <span class="comment">// ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure><ul><li>null 指空值(empty vlaue)</li><li>undefined 指没有值或者从未赋值(missing value)</li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p><strong>字符串这边没有太多可以说的，下面说的不可变，也只是值传递的表现现象而已</strong></p><p>字符串不可变。(事实上在JavaScript中所有标量基本类型值都是不可更改的,Number,Boolean,String)<br>指的是字符串的成员函数操作不会改变其原始值，而是创建并返回一个新的字符串。<br>在JavaScript中，字符串的操作总是和数组贴合的很接近，字符串的操作，往往是拆分成“字符数组”的操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串颠倒</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'cosine'</span></span><br><span class="line"><span class="keyword">var</span> b = a.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) <span class="comment">//字符串反转</span></span><br><span class="line"><span class="comment">// 创建副本,借用数组的成员函数来进行join的操作</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">Array</span>.prototype.join.call(a,<span class="string">"-"</span>)</span><br><span class="line"><span class="comment">// 为什么我们不试试借用reverse呢</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">Array</span>.prototype.reverse.call(a);<span class="comment">//TypeError: Cannot assign to read only property '0' of object '[object String]' at String.reverse (native)</span></span><br></pre></td></tr></table></figure><p>想一下,join 和 reverse 有什么本质上的区别。<br>数组方法中，有很多不一样的方法，一些方法会操作修改到原有数组，一些则是作为拷贝返回新的数组。<br>刚才提到的字符串不变性的问题,这里显然报出read only的错误了。</p><p>关于内置对象中的一些其他方法，我就不在说了，可以分出专题写常用的一些操作方法</p><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>这一直是JavaScript令人诟病的类型，因为只有一种数值类型，而且是常常惹事的双精度浮点数<br>二进制浮点数最大的问题</p><h3 id="浮点精度"><a href="#浮点精度" class="headerlink" title="浮点精度"></a>浮点精度</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>Number最大的坑就是安全范围2E53-1，只有53位，精度问题都有</strong><br>处理上面这个精度问题，简单的话可以使用 Number.EPSILON 这个机器精度常量值来解决。</p><h3 id="浮点数字语法的细节"><a href="#浮点数字语法的细节" class="headerlink" title="浮点数字语法的细节"></a>浮点数字语法的细节</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">42.</span>toFixed(<span class="number">3</span>) <span class="comment">// 语法错误</span></span><br><span class="line">(<span class="number">42</span>).toFixed(<span class="number">3</span>)</span><br><span class="line"><span class="number">42.</span>.toFixed(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>当然不推荐上面这种使用原生函数的方式，但是要注意一个坑<br>“42.”会被编译器认为是“42.0”省略0的写法。</p><h3 id="关于位运算符"><a href="#关于位运算符" class="headerlink" title="关于位运算符"></a>关于位运算符</h3><p><a href="http://jerryzou.com/posts/do-you-really-want-use-bit-operators-in-JavaScript/" target="_blank" rel="noopener">为什么不要在JavaScript中使用位操作符</a></p><blockquote><p>虽然说整数最大能到达到53位，但是有些数字操作(如数位操作)值适用于32位数字，所以这些操作中数字的安全范围就要小很多。a|0 可以将变量a中的数值转换位32位有符号整数，因为数位运算符 | 只适用于32位有符号整数</p></blockquote><h3 id="关于NAN"><a href="#关于NAN" class="headerlink" title="关于NAN"></a>关于NAN</h3><ul><li>请使用Number.isNaN 函数来判断</li><li>NaN是JavaScript中唯一一个不等于自身的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Number</span>.isNaN)&#123;</span><br><span class="line">  <span class="built_in">Number</span>.isNaN = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> n !== n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><p>布尔类型除了开关的Flag的天性设计，最大的感受是为了判断符而生的。</p><p>注意不要使用 new Boolean这个原生函数，这其实也违背了我上一句说的话。<br>这根本一点 也不判断。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (bool) &#123;</span><br><span class="line">alert(<span class="string">'true'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">alert(<span class="string">'false'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>这个没什么意义的面试题和类型转换有关。</p><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>严格来说数组不属于类型，这里更关注值的类型特性。<br>数组更多关注一些内置的方法操作和类对象特性显露。<br>后面有文章会说~</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入系列 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面试问答Q&amp;A</title>
      <link href="/2017/01/01/2017-01-01-%E9%9D%A2%E8%AF%95%E9%97%AE%E7%AD%94Q&amp;A/"/>
      <content type="html"><![CDATA[<p>[面试问答Q&amp;A来源]<a href="https://github.com/poetries/FE-Interview-Questions/blob/master/Interview-Questions/Front-end-Developer-Questions%5Bquestion-and-answer-version%5D.md" target="_blank" rel="noopener">https://github.com/poetries/FE-Interview-Questions/blob/master/Interview-Questions/Front-end-Developer-Questions%5Bquestion-and-answer-version%5D.md</a></p><h3 id="前端开发知识点"><a href="#前端开发知识点" class="headerlink" title="前端开发知识点"></a>前端开发知识点</h3><hr><ul><li>HTML&amp;CSS<ul><li>对Web标准的理解、浏览器内核差异、兼容性、hack、</li><li>CSS基本功：布局、盒子模型、选择器优先级、HTML5、CSS3、Flexbox</li><li>盒模型 —— 外边距、内边距和边框之间的关系，及IE8以下版本的浏览器中的盒模型</li><li>DOM结构 —— 两个节点之间可能存在哪些关系以及如何在节点之间任意移动。</li><li>DOM操作 —— 如何添加、移除、移动、复制、创建和查找节点等。</li><li>事件 —— 如何使用事件，以及IE和标准DOM事件模型之间存在的差别。</li><li>块级元素与行内元素 —— 怎么用CSS控制它们、以及如何合理的使用它们</li><li>浮动元素 —— 怎么使用它们、它们有什么问题以及怎么解决这些问题。</li><li>HTML与XHTML —— 二者有什么区别，你觉得应该使用哪一个并说出理由。</li><li>JSON —— 作用、用途、设计结构</li></ul></li><li>JavaScript：<ul><li>数据类型、运算、对象、Function、继承、闭包、作用域、原型链、事件、RegExp、JSON、Ajax、DOM、BOM、内存泄漏、跨域、异步装载、模板引擎、前端MVC、路由、模块化、Canvas、ECMAScript </li><li>XMLHttpRequest —— 这是什么、怎样完整地执行一次GET请求、怎样检测错误。</li><li>严格模式与混杂模式 —— 如何触发这两种模式，区分它们有何意义。</li></ul></li><li>其他：<ul><li>移动端、响应式、自动化构建、HTTP、离线存储、WEB安全、优化、重构、团队协作、可维护、易用性、SEO、UED、架构、职业生涯、快速学习能力</li></ul></li></ul><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><hr><h4 id="语法基础点"><a href="#语法基础点" class="headerlink" title="语法基础点"></a>语法基础点</h4><p><strong>介绍js的基本数据类型</strong></p><ul><li>Undefined、Null、Boolean、Number、String、 ECMAScript 2015 新增:Symbol(创建后独一无二且不可变的数据类型)</li></ul><p><strong>JavaScript有几种类型的值？，你能画一下他们的内存图吗？</strong></p><ul><li>栈：原始数据类型（Undefined，Null，Boolean，Number、String）</li><li><p>堆：引用数据类型（对象、数组和函数）</p></li><li><p>两种类型的区别是：存储位置不同；</p><ul><li>原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</li></ul></li><li><p>引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体</p></li></ul><p><strong>介绍js有哪些内置对象？</strong></p><ul><li>Object 是 JavaScript 中所有对象的父对象</li><li>数据封装类对象：Object、Array、Boolean、Number 和 String</li><li>其他对象：Function、Arguments、Math、Date、RegExp、Error</li></ul><h4 id="JavaScript原型"><a href="#JavaScript原型" class="headerlink" title="JavaScript原型"></a>JavaScript原型</h4><p><strong>JavaScript原型，原型链 ? 有什么特点？</strong></p><ul><li>每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，于是就这样一直找下去，也就是我们平时所说的原型链的概念。</li><li>关系：instance.constructor.prototype = instance.<strong>proto</strong></li><li>特点：JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。</li><li>当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话， 就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Func()&#123;&#125;</span><br><span class="line">Func.prototype.name = &quot;Sean&quot;;</span><br><span class="line">Func.prototype.getInfo = function() &#123;</span><br><span class="line">  return this.name;</span><br><span class="line">&#125;</span><br><span class="line">var person = new Func();//现在可以参考var person = Object.create(oldObject);</span><br><span class="line">console.log(person.getInfo());//它拥有了Func的属性和方法</span><br><span class="line">//&quot;Sean&quot;</span><br><span class="line">console.log(Func.prototype);</span><br><span class="line">// Func &#123; name=&quot;Sean&quot;, getInfo=function()&#125;</span><br></pre></td></tr></table></figure><h4 id="常见Q-amp-A"><a href="#常见Q-amp-A" class="headerlink" title="常见Q&amp;A"></a>常见Q&amp;A</h4><p><strong>如何将字符串转化为数字，例如’12.3b’?</strong></p><ul><li>parseFloat(‘12.3b’);</li><li>正则表达式，’12.3b’.match(/(\d)+(.)?(\d)+/g)[0] * 1, 但是这个不太靠谱，提供一种思路而已</li></ul><p><strong>如何将浮点数点左边的数每三位添加一个逗号，如12000000.11转化为『12,000,000.11』?</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function commafy(num)&#123;</span><br><span class="line">return num &amp;&amp; num</span><br><span class="line">.toString()</span><br><span class="line">.replace(/(\d)(?=(\d&#123;3&#125;)+\.)/g, function($1, $2)&#123;</span><br><span class="line">return $2 + &apos;,&apos;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如何实现数组的随机排序？</strong></p><ul><li>方法一：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randSort1</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len = arr.length;i &lt; len; i++ )&#123;</span><br><span class="line"><span class="keyword">var</span> rand = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*len);</span><br><span class="line"><span class="keyword">var</span> temp = arr[rand];</span><br><span class="line">arr[rand] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(randSort1(arr));</span><br></pre></td></tr></table></figure><ul><li>方法二：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randSort2</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> mixedArray = [];</span><br><span class="line"><span class="keyword">while</span>(arr.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> randomIndex = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*arr.length);</span><br><span class="line">mixedArray.push(arr[randomIndex]);</span><br><span class="line">arr.splice(randomIndex, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mixedArray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(randSort2(arr));</span><br></pre></td></tr></table></figure><ul><li>方法三：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p><strong>Javascript如何实现继承？</strong></p><ul><li>构造继承</li><li>原型继承</li><li>实例继承</li><li><p>拷贝继承</p></li><li><p>原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'wang'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = <span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();<span class="comment">//继承了Parent，通过原型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Child();</span><br><span class="line">alert(demo.age);</span><br><span class="line">alert(demo.name);<span class="comment">//得到被继承的属性</span></span><br></pre></td></tr></table></figure><p><strong>javascript创建对象的几种方式？</strong></p><ul><li><p>javascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用</p></li><li><p>1、对象字面量的方式</p><ul><li><code>person={firstname:&quot;Mark&quot;,lastname:&quot;Yun&quot;,age:25,eyecolor:&quot;black&quot;};</code></li></ul></li><li><p>2、用function来模拟无参的构造函数</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;&#125;</span><br><span class="line">//定义一个function，如果使用new&quot;实例化&quot;,该function可以看作是一个Class</span><br><span class="line">person.name=&quot;Mark&quot;;</span><br><span class="line">var person=new Person();</span><br><span class="line">person.age=&quot;25&quot;;</span><br><span class="line">person.work=function()&#123;</span><br><span class="line">alert(person.name+&quot; hello...&quot;);</span><br><span class="line">&#125;</span><br><span class="line">person.work();</span><br></pre></td></tr></table></figure><ul><li>3、用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Pet(name,age,hobby)&#123;</span><br><span class="line">   this.name=name;//this作用域：当前对象</span><br><span class="line">   this.age=age;</span><br><span class="line">   this.hobby=hobby;</span><br><span class="line">   this.eat=function()&#123;</span><br><span class="line">      alert(&quot;我叫&quot;+this.name+&quot;,我喜欢&quot;+this.hobby+&quot;,是个程序员&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">var maidou =new Pet(&quot;麦兜&quot;,25,&quot;coding&quot;);//实例化、创建对象</span><br><span class="line">maidou.eat();//调用eat方法</span><br></pre></td></tr></table></figure><ul><li>4、用工厂方式来创建（内置对象）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var wcDog =new Object();</span><br><span class="line"> wcDog.name=&quot;旺财&quot;;</span><br><span class="line"> wcDog.age=3;</span><br><span class="line"> wcDog.work=function()&#123;</span><br><span class="line">   alert(&quot;我是&quot;+wcDog.name+&quot;,汪汪汪......&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> wcDog.work();</span><br></pre></td></tr></table></figure><ul><li>5、用原型方式来创建</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Dog()&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> Dog.prototype.name=&quot;旺财&quot;;</span><br><span class="line"> Dog.prototype.eat=function()&#123;</span><br><span class="line"> alert(this.name+&quot;是个吃货&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> var wangcai =new Dog();</span><br><span class="line"> wangcai.eat();</span><br></pre></td></tr></table></figure><ul><li>6、用混合方式来创建</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Car(name,price)&#123;</span><br><span class="line">  this.name=name;</span><br><span class="line">  this.price=price;</span><br><span class="line">&#125;</span><br><span class="line"> Car.prototype.sell=function()&#123;</span><br><span class="line">   alert(&quot;我是&quot;+this.name+&quot;，我现在卖&quot;+this.price+&quot;万元&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">var camry =new Car(&quot;凯美瑞&quot;,27);</span><br><span class="line">camry.sell();</span><br></pre></td></tr></table></figure><p><strong>Javascript作用链域?</strong></p><ul><li>全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。</li><li>当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，直至全局函数，这种组织形式就是作用域链</li></ul><p><strong>谈谈This对象的理解。</strong></p><ul><li>this总是指向函数的直接调用者（而非间接调用者）；</li><li>如果有new关键字，this指向new出来的那个对象；</li><li>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window</li></ul><p><strong>eval是做什么的？</strong></p><ul><li>它的功能是把对应的字符串解析成JS代码并运行；</li><li>应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）</li><li>由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval(‘(‘+ str +’)’);</li></ul><p><strong>什么是window对象? 什么是document对象?</strong></p><ul><li>window对象是指浏览器打开的窗口。</li><li>document对象是Documentd对象（HTML 文档对象）的一个只读引用，window对象的一个属性</li></ul><p><strong>null，undefined 的区别？</strong></p><ul><li>null         表示一个对象是“没有值”的值，也就是值为“空”；</li><li><p>undefined     表示一个变量声明了没有初始化(赋值)；</p></li><li><p>undefined不是一个有效的JSON，而null是；</p></li><li>undefined的类型(typeof)是undefined；</li><li>null的类型(typeof)是object；</li></ul><ul><li>Javascript将未赋值的变量默认值设为undefined；</li><li>Javascript从来不会将变量设为null。它是用来让程序员表明某个用var声明的变量时没有值的</li></ul><ul><li><p>typeof undefined</p><ul><li>undefined :<ul><li>是一个表示”无”的原始值或者说表示”缺少值”，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 undefined；</li><li>例如变量被声明了，但没有赋值时，就等于undefined</li></ul></li></ul></li><li><p>typeof null //“object”</p><ul><li>null : 是一个对象(空对象, 没有任何属性和方法)；</li><li>例如作为函数的参数，表示该函数的参数不是对象；</li></ul></li><li><p>注意：</p><ul><li>在验证null时，一定要使用　=== ，因为 == 无法分别 null 和　undefined</li><li>null == undefined // true</li><li>null === undefined // false</li></ul></li></ul><p><strong>写一个通用的事件侦听器函数。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">// event(事件)工具集，来源：github.com/markyun</span><br><span class="line">markyun.Event = &#123;</span><br><span class="line">// 页面加载完成后</span><br><span class="line">readyEvent : function(fn) &#123;</span><br><span class="line">if (fn==null) &#123;</span><br><span class="line">fn=document;</span><br><span class="line">&#125;</span><br><span class="line">var oldonload = window.onload;</span><br><span class="line">if (typeof window.onload != &apos;function&apos;) &#123;</span><br><span class="line">window.onload = fn;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">window.onload = function() &#123;</span><br><span class="line">oldonload();</span><br><span class="line">fn();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">// 视能力分别使用dom0||dom2||IE方式 来绑定事件</span><br><span class="line">// 参数： 操作的元素,事件名称 ,事件处理程序</span><br><span class="line">addEvent : function(element, type, handler) &#123;</span><br><span class="line">if (element.addEventListener) &#123;</span><br><span class="line">//事件类型、需要执行的函数、是否捕捉</span><br><span class="line">element.addEventListener(type, handler, false);</span><br><span class="line">&#125; else if (element.attachEvent) &#123;</span><br><span class="line">element.attachEvent(&apos;on&apos; + type, function() &#123;</span><br><span class="line">handler.call(element);</span><br><span class="line">&#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">element[&apos;on&apos; + type] = handler;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">// 移除事件</span><br><span class="line">removeEvent : function(element, type, handler) &#123;</span><br><span class="line">if (element.removeEventListener) &#123;</span><br><span class="line">element.removeEventListener(type, handler, false);</span><br><span class="line">&#125; else if (element.datachEvent) &#123;</span><br><span class="line">element.detachEvent(&apos;on&apos; + type, handler);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">element[&apos;on&apos; + type] = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">// 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)</span><br><span class="line">stopPropagation : function(ev) &#123;</span><br><span class="line">if (ev.stopPropagation) &#123;</span><br><span class="line">ev.stopPropagation();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">ev.cancelBubble = true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">// 取消事件的默认行为</span><br><span class="line">preventDefault : function(event) &#123;</span><br><span class="line">if (event.preventDefault) &#123;</span><br><span class="line">event.preventDefault();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">event.returnValue = false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">// 获取事件目标</span><br><span class="line">getTarget : function(event) &#123;</span><br><span class="line">return event.target || event.srcElement;</span><br><span class="line">&#125;,</span><br><span class="line">// 获取event对象的引用，取到事件的所有信息，确保随时能使用event；</span><br><span class="line">getEvent : function(e) &#123;</span><br><span class="line">var ev = e || window.event;</span><br><span class="line">if (!ev) &#123;</span><br><span class="line">var c = this.getEvent.caller;</span><br><span class="line">while (c) &#123;</span><br><span class="line">ev = c.arguments[0];</span><br><span class="line">if (ev &amp;&amp; Event == ev.constructor) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">c = c.caller;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return ev;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>[“1”, “2”, “3”].map(parseInt) 答案是多少？</strong></p><ul><li>parseInt() 函数能解析一个字符串，并返回一个整数，需要两个参数 (val, radix)，其中 radix 表示要解析的数字的基数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function parseInt(str, radix) &#123;</span><br><span class="line">    return str+&apos;-&apos;+radix;</span><br><span class="line">&#125;;</span><br><span class="line">var a=[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;];</span><br><span class="line">a.map(parseInt);  // [&quot;1-0&quot;, &quot;2-1&quot;, &quot;3-2&quot;] 不能大于radix</span><br></pre></td></tr></table></figure><ul><li>因为二进制里面，没有数字3,导致出现超范围的radix赋值和不合法的进制解析，才会返回NaN所以[“1”, “2”, “3”].map(parseInt) 答案也就是：[1, NaN, NaN]</li></ul><p><strong>事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</strong></p><ul><li>我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为</li><li>事件处理机制：IE是事件冒泡、Firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件</li><li>ev.stopPropagation();（旧ie的方法 ev.cancelBubble = true;）</li></ul><p><strong>什么是闭包（closure），为什么要用它？</strong></p><ul><li><p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部</p></li><li><p>闭包的特性：</p><ul><li>函数内再嵌套函数</li><li>内部函数可以引用外层的参数和变量</li><li>参数和变量不会被垃圾回收机制回收</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//li节点的onclick事件都能正确的弹出当前被点击的li索引</span><br><span class="line"> &lt;ul id=&quot;testUL&quot;&gt;</span><br><span class="line">    &lt;li&gt; index = 0&lt;/li&gt;</span><br><span class="line">    &lt;li&gt; index = 1&lt;/li&gt;</span><br><span class="line">    &lt;li&gt; index = 2&lt;/li&gt;</span><br><span class="line">    &lt;li&gt; index = 3&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  var nodes = document.getElementsByTagName(&quot;li&quot;);</span><br><span class="line">for(i = 0;i&lt;nodes.length;i+= 1)&#123;</span><br><span class="line">    nodes[i].onclick = (function(i)&#123;</span><br><span class="line">              return function() &#123;</span><br><span class="line">                 console.log(i);</span><br><span class="line">              &#125; //不用闭包的话，值每次都是4</span><br><span class="line">            &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在</li><li>使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源</li><li>因为say667()的内部函数的执行需要依赖say667()中的变量</li><li>这是对闭包作用的非常直白的描述</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function say667() &#123;</span><br><span class="line">// Local variable that ends up within closure</span><br><span class="line">var num = 666;</span><br><span class="line">var sayAlert = function() &#123;</span><br><span class="line">alert(num);</span><br><span class="line">&#125;</span><br><span class="line">num++;</span><br><span class="line">return sayAlert;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> var sayAlert = say667();</span><br><span class="line"> sayAlert()//执行结果应该弹出的667</span><br></pre></td></tr></table></figure><p><strong>javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？</strong></p><ul><li>use strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,</li><li>使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。</li><li>默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值;</li><li>全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用；</li><li>消除代码运行的一些不安全之处，保证代码运行的安全,限制函数中的arguments修改，严格模式下的eval函数的行为和非严格模式的也不相同;</li><li>提高编译器效率，增加运行速度；为未来新版本的Javascript标准化做铺垫。</li></ul><p><strong>如何判断一个对象是否属于某个类？</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(a instanceof Person)&#123;</span><br><span class="line">       alert(&apos;yes&apos;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p><strong>new操作符具体干了什么呢?</strong></p><ul><li>创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</li><li>属性和方法被加入到 this 引用的对象中。</li><li>新创建的对象由 this 所引用，并且最后隐式的返回 this</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var obj  = &#123;&#125;;</span><br><span class="line">obj.__proto__ = Base.prototype;</span><br><span class="line">Base.call(obj);</span><br></pre></td></tr></table></figure><p><strong>Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</strong></p><ul><li>javaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员</li><li>使用方法： object.hasOwnProperty(proName)</li><li>其中参数object是必选项。一个对象的实例。</li><li>proName是必选项。一个属性名称的字符串值。</li><li>如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。</li></ul><p><strong>JSON 的了解？</strong></p><ul><li>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。</li><li>它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小</li><li>如：{“age”:”12”, “name”:”back”}</li><li>JSON字符串转换为JSON对象:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj =eval(&apos;(&apos;+ str +&apos;)&apos;);</span><br><span class="line">var obj = str.parseJSON();</span><br><span class="line">var obj = JSON.parse(str);</span><br><span class="line"></span><br><span class="line">JSON对象转换为JSON字符串：</span><br><span class="line">var last=obj.toJSONString();</span><br><span class="line">var last=JSON.stringify(obj);</span><br></pre></td></tr></table></figure><p><strong>js延迟加载的方式有哪些？</strong></p><ul><li>defer和async、动态创建DOM方式（用得最多）、按需异步载入js</li></ul><p><strong>Ajax 是什么? 如何创建一个Ajax？</strong></p><ul><li>ajax的全称：Asynchronous Javascript And XML。</li><li>异步传输+js+xml</li><li><p>所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验</p></li><li><p>(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象</p></li><li>(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息</li><li>(3)设置响应HTTP请求状态变化的函数</li><li>(4)发送HTTP请求</li><li>(5)获取异步调用返回的数据</li><li>(6)使用JavaScript和DOM实现局部刷新</li></ul><p><strong>Ajax 解决浏览器缓存问题？</strong></p><ul><li><p>1、在ajax发送请求前加上      anyAjaxObj.setRequestHeader(“If-Modified-Since”,”0”)。</p></li><li><p>2、在ajax发送请求前加上    anyAjaxObj.setRequestHeader(“Cache-Control”,”no-cache”)。</p></li><li><p>3、在URL后面加上一个随机数： “fresh=” + Math.random();。</p></li><li><p>4、在URL后面加上时间搓：”nowtime=” + new Date().getTime();。</p></li><li><p>5、如果是使用jQuery，直接这样就可以了    $.ajaxSetup({cache:false})。这样页面的所有ajax都会执行这条语句就是不需要保存缓存记录</p></li></ul><p><strong>同步和异步的区别?</strong></p><ul><li>同步的概念应该是来自于OS中关于同步的概念:不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方式).同步强调的是顺序性.谁先谁后.异步则不存在这种顺序性.</li><li>同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作</li><li>异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容</li></ul><p><strong>如何解决跨域问题?</strong></p><ul><li>jsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面</li></ul><p><strong>模块化开发怎么做？</strong></p><ul><li>不暴露私有成员</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var module1 = (function()&#123;</span><br><span class="line">　　　　var _count = 0;</span><br><span class="line">　　　　var m1 = function()&#123;</span><br><span class="line">　　　　　　//...</span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　　　var m2 = function()&#123;</span><br><span class="line">　　　　　　//...</span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　　　return &#123;</span><br><span class="line">　　　　　　m1 : m1,</span><br><span class="line">　　　　　　m2 : m2</span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　&#125;)();</span><br></pre></td></tr></table></figure><p><strong>AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？</strong></p><ul><li>Asynchronous Module Definition，异步模块定义，所有的模块将被异步加载，模块加载不影响后面语句运行。所有依赖某些模块的语句均放置在回调函数中</li><li>区别：<ul><li>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible</li><li>CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// CMD</span><br><span class="line">define(function(require, exports, module) &#123;</span><br><span class="line">    var a = require(&apos;./a&apos;)</span><br><span class="line">    a.doSomething()</span><br><span class="line">    // 此处略去 100 行</span><br><span class="line">    var b = require(&apos;./b&apos;) // 依赖可以就近书写</span><br><span class="line">    b.doSomething()</span><br><span class="line">    // ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// AMD 默认推荐</span><br><span class="line">define([&apos;./a&apos;, &apos;./b&apos;], function(a, b) &#123; // 依赖必须一开始就写好</span><br><span class="line">    a.doSomething()</span><br><span class="line">    // 此处略去 100 行</span><br><span class="line">    b.doSomething()</span><br><span class="line">    // ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>异步加载JS的方式有哪些？</strong></p><ul><li><p>(1) defer，只支持IE</p></li><li><p>(2) async：</p></li><li><p>(3) 创建script，插入到DOM中，加载完毕后callBack</p></li></ul><p><strong>documen.write和 innerHTML的区别</strong></p><ul><li>document.write只能重绘整个页面</li><li>innerHTML可以重绘页面的一部分</li></ul><p><strong>DOM操作——怎样添加、移除、移动、复制、创建和查找节点?</strong></p><ul><li>（1）创建新节点<ul><li>createDocumentFragment()    //创建一个DOM片段</li><li>createElement()   //创建一个具体的元素</li><li>createTextNode()   //创建一个文本节点</li></ul></li><li>（2）添加、移除、替换、插入<ul><li>appendChild()</li><li>removeChild()</li><li>replaceChild()</li><li>insertBefore() //在已有的子节点前插入一个新的子节点</li></ul></li><li>（3）查找<ul><li>getElementsByTagName()    //通过标签名称</li><li>getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)</li><li>getElementById()    //通过元素Id，唯一性</li></ul></li></ul><p><strong>.call() 和 .apply() 的区别？</strong></p><ul><li>例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);</li><li>注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function add(a,b)</span><br><span class="line">&#123;</span><br><span class="line">    alert(a+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sub(a,b)</span><br><span class="line">&#123;</span><br><span class="line">    alert(a-b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add.call(sub,3,1);</span><br></pre></td></tr></table></figure><p><strong>jquery.extend 与 jquery.fn.extend的区别？</strong></p><ul><li>jquery.extend 为jquery类添加类方法，可以理解为添加静态方法</li><li>jquery.fn.extend:源码中jquery.fn = jquery.prototype，所以对jquery.fn的扩展，就是为jquery类添加成员函数<pre><code>使用：</code></pre></li><li>jquery.extend扩展，需要通过jquery类来调用，而jquery.fn.extend扩展，所有jquery实例都可以直接调用</li></ul><p><strong>Jquery与jQuery UI 有啥区别？</strong></p><ul><li>jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等</li><li>jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件</li><li>提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等</li></ul><p><strong>jquery 中如何将数组转化为json字符串，然后再转化回来？</strong></p><ul><li>jQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.fn.stringifyArray = function(array) &#123;</span><br><span class="line">    return JSON.stringify(array)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.fn.parseArray = function(array) &#123;</span><br><span class="line">    return JSON.parse(array)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">然后调用：</span><br><span class="line">$(&quot;&quot;).stringifyArray(array)</span><br></pre></td></tr></table></figure><p><strong>针对 jQuery 的优化方法？</strong></p><ul><li>基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。</li><li>频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好<ul><li>比如：var str=$(“a”).attr(“href”);</li></ul></li><li>for (var i = size; i &lt; arr.length; i++) {}<ul><li>for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让循环跑得更快：</li><li>for (var i = size, length = arr.length; i &lt; length; i++) {}</li></ul></li></ul><p><strong>如何判断当前脚本运行在浏览器还是node环境中？（阿里）</strong></p><ul><li>this === window ? ‘browser’ : ‘node’;</li><li>通过判断Global对象是否为window，如果不为window，当前脚本没有运行在浏览器中</li></ul><p><strong>jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?</strong></p><ul><li>jquery stop(): 如：$(“#div”).stop().animate({width:”100px”},100);</li></ul><p><strong>那些操作会造成内存泄漏？</strong></p><ul><li>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在</li><li>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收</li><li>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。<pre><code>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环)</code></pre></li></ul><p><strong>JQuery一个对象可以同时绑定多个事件，这是如何实现的？</strong></p><ul><li>多个事件同一个函数：<code>$(&quot;div&quot;).on(&quot;click mouseover&quot;, function(){});</code></li><li>多个事件不同函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;div&quot;).on(&#123;</span><br><span class="line">click: function()&#123;&#125;,</span><br><span class="line">mouseover: function()&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?</strong></p><ul><li>Chrome,Safari浏览器内核</li></ul><p><strong>检测浏览器版本版本有哪些方式？</strong></p><ul><li>功能检测、userAgent特征检测</li><li>比如：navigator.userAgent</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36</span><br><span class="line">  (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36&quot;</span><br></pre></td></tr></table></figure><p><strong>What is a Polyfill?</strong></p><ul><li>polyfill 是“在旧版浏览器上复制标准 API 的 JavaScript 补充”,可以动态地加载 JavaScript 代码或库，在不支持这些标准 API 的浏览器中模拟它们</li><li>例如，geolocation（地理位置）polyfill 可以在 navigator 对象上添加全局的 geolocation 对象，还能添加 getCurrentPosition 函数以及“坐标”回调对象</li><li>所有这些都是 W3C 地理位置 API 定义的对象和函数。因为 polyfill 模拟标准 API，所以能够以一种面向所有浏览器未来的方式针对这些 API 进行开发</li><li>一旦对这些 API 的支持变成绝对大多数，则可以方便地去掉 polyfill，无需做任何额外工作。</li></ul><p><strong>做的项目中，有没有用过或自己实现一些 polyfill 方案（兼容性处理方案）？</strong></p><ul><li>比如： html5shiv、Geolocation、Placeholder</li></ul><p><strong>使用JS实现获取文件扩展名？</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function getFileExtension(filename) &#123;</span><br><span class="line">  return filename.slice((filename.lastIndexOf(&quot;.&quot;) - 1 &gt;&gt;&gt; 0) + 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>String.lastIndexOf() </p><ul><li>方法返回指定值（本例中的’.’）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。对于’filename’和’.hiddenfile’，lastIndexOf的返回值分别为0和-1无符号右移操作符(»&gt;) </li><li>将-1转换为4294967295，将-2转换为4294967294，这个方法可以保证边缘情况时文件名不变</li></ul></li><li><p>String.prototype.slice() </p><ul><li>从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为””</li></ul></li></ul><h3 id="ECMAScript6-相关"><a href="#ECMAScript6-相关" class="headerlink" title="ECMAScript6 相关"></a>ECMAScript6 相关</h3><hr><p><strong>Object.is() 与原来的比较操作符“ ===”、“ ==”的区别？</strong></p><ul><li>两等号判等，会在比较时进行类型转换；</li><li>三等号判等(判断严格)，比较时不进行隐式类型转换,（类型不同则会返回false）；</li><li>Object.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，但 Object.is(NaN, NaN) 会返回 true</li><li>Object.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。</li></ul><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><hr><p><strong>页面重构怎么操作？</strong></p><ul><li><p>网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI</p></li><li><p>对于传统的网站来说重构通常是：</p><ul><li>表格(table)布局改为DIV+CSS</li><li>使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)</li><li>对于移动平台的优化</li><li>针对于SEO进行优化</li><li><p>深层次的网站重构应该考虑的方面</p></li><li><p>减少代码间的耦合</p></li><li>让代码保持弹性</li><li>严格按规范编写代码</li><li>设计可扩展的API</li><li>代替旧有的框架、语言(如VB)</li><li>增强用户体验</li><li><p>通常来说对于速度的优化也包含在重构中</p></li><li><p>压缩JS、CSS、image等前端资源(通常是由服务器来解决)</p></li><li>程序的性能优化(如数据读写)</li><li>采用CDN来加速资源加载</li><li>对于JS DOM的优化</li><li>HTTP服务器的文件缓存</li></ul></li></ul><p><strong>列举IE与其他浏览器不一样的特性？</strong></p><ul><li>事件不同之处：<ul><li>触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性；</li><li>获取字符代码、如果按键代表一个字符（shift、ctrl、alt除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性；</li><li>阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法；</li><li>停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation()</li></ul></li></ul><p><strong>什么叫优雅降级和渐进增强？</strong></p><ul><li>优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用</li><li>渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。</li><li>如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验</li></ul><p><strong>是否了解公钥加密和私钥加密</strong></p><ul><li>一般情况下是指私钥用于对数据进行签名，公钥用于对签名进行验证;</li><li>HTTP网站在浏览器端用公钥加密敏感数据，然后在服务器端再用私钥解密</li></ul><p><strong>WEB应用从服务器主动推送Data到客户端有那些方式？</strong></p><ul><li>html5提供的Websocket</li><li>不可见的iframe</li><li>WebSocket通过Flash</li><li>XHR长时间连接</li><li>XHR Multipart Streaming</li><li><script>标签的长时间连接(可跨域)</li></ul><p><strong>对Node的优点和缺点提出了自己的看法？</strong></p><ul><li>（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。</li><li>（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。</li></ul><p><strong>你有用过哪些前端性能优化的方法？</strong></p><ul><li><p>（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。</p></li><li><p>（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</p></li><li><p>（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</p></li><li><p>（4） 当需要设置的样式很多时设置className而不是直接操作style。</p></li><li><p>（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。</p></li><li><p>（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。</p></li><li><p>（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳</p></li><li>（8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢</li></ul><ul><li>对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无法“优化”的</li></ul><p><strong>http状态码有那些？分别代表是什么意思？</strong></p><ul><li>100  Continue    继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息</li><li>200  OK         正常返回信息</li><li>201  Created      请求成功并且服务器创建了新的资源</li><li>202  Accepted     服务器已接受请求，但尚未处理</li><li>301  Moved Permanently  请求的网页已永久移动到新位置。</li><li>302 Found          临时性重定向。</li><li>303 See Other      临时性重定向，且总是使用 GET 请求新的 URI。</li><li><p>304  Not Modified 自从上次请求后，请求的网页未修改过。</p></li><li><p>400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</p></li><li>401 Unauthorized 请求未授权。</li><li>403 Forbidden      禁止访问。</li><li><p>404 Not Found      找不到如何与 URI 相匹配的资源。</p></li><li><p>500 Internal Server Error  最常见的服务器端错误。</p></li><li>503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）</li></ul><p><strong>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）</strong></p><blockquote><p>注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、 到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等</p></blockquote><ul><li>详细版：</li></ul><ul><li>1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;</li><li>2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;</li><li>3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;</li><li>4、进行HTTP协议会话，客户端发送报头(请求报头);</li><li>5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;</li><li>6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;</li><li>7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;</li><li>8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;</li><li>9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;</li><li><p>10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。</p></li><li><p>简洁版：</p><ul><li>浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；</li><li>服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；</li><li>浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；</li><li>载入解析到的资源文件，渲染页面，完成</li></ul></li></ul><p><strong>对前端工程师这个职位是怎么样理解的？它的前景会怎么样？</strong></p><ul><li><p>前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。  </p><ul><li>1、实现界面交互</li><li>2、提升用户体验</li><li>3、有了Node.js，前端可以实现服务端的一些事情</li></ul></li><li><p>前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好</p></li><li>参与项目，快速高质量完成实现效果图，精确到1px；</li><li>与团队成员，UI设计，产品经理的沟通</li><li>做好的页面结构，页面重构和用户体验</li><li>处理hack，兼容、写出优美的代码格式</li><li>针对服务器的优化、拥抱最新前端技术</li></ul><p><strong>平时如何管理你的项目？</strong></p><ul><li><p>先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；</p></li><li><p>编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；</p></li><li><p>标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；</p></li><li><p>页面进行标注（例如 页面 模块 开始和结束）；</p></li><li><p>CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；</p></li><li><p>JS 分文件夹存放 命名以该JS功能为准的英文翻译。</p></li><li><p>图片采用整合的 images.png png8 格式文件使用 - 尽量整合在一起使用方便将来的管理</p></li></ul><p><strong>说说最近最流行的一些东西吧？常去哪些网站？</strong></p><ul><li>ES6\WebAssembly\Node\MVVM\Web Components\React\React Native\Webpack 组件化</li></ul><p><strong>移动端（Android IOS）怎么做好用户体验?</strong></p><ul><li>清晰的视觉纵线、</li><li>信息的分组、极致的减法、</li><li>利用选择代替输入、</li><li>标签及文字的排布方式、</li><li>依靠明文确认密码、</li><li>合理的键盘利用、</li></ul><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><hr><p><strong>Doctype作用？标准模式与兼容模式各有什么区别?</strong></p><ul><li>&lt;!DOCTYPE&gt;声明位于位于HTML文档中的第一行，处于 <html> 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现</li><li>标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作</li></ul><p><strong>HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？</strong></p><ul><li>HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）</li><li>而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型</li></ul><p><strong>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</strong></p><ul><li><p>首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素</p></li><li><p>行内元素有：a b span img input select strong（强调的语气）</p></li><li>块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p</li><li>常见的空元素：<br> <hr> <img> <input> <link> <meta></li></ul><p><strong>页面导入样式时，使用link和@import有什么区别？</strong></p><ul><li>link属于XHTML标签，除了加载CSS外，还能用于定义RSS,定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;</li><li>页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;</li><li>import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;</li></ul><p><strong>介绍一下你对浏览器内核的理解？</strong></p><ul><li>主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。</li><li>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核</li><li>JS引擎则：解析和执行javascript来实现网页的动态效果</li><li>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。</li></ul><p><strong>常见的浏览器内核有哪些？</strong></p><ul><li>Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]</li><li>Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等</li><li>Presto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]</li><li>Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]</li></ul><p><strong>html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和HTML5？</strong></p><ul><li>HTML5 现在已经不是 SGML的子集，主要是关于图像，位置，存储，多任务等功能的增加</li><li>新增功能<ul><li>绘画 canvas;</li><li>用于媒介回放的 video 和 audio 元素;</li><li>本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;</li><li>sessionStorage 的数据在浏览器关闭后自动删除;</li><li>语意化更好的内容元素，比如 article、footer、header、nav、section;</li><li>表单控件，calendar、date、time、email、url、search</li><li>新的技术webworker, websocket, Geolocation</li></ul></li><li><p>移除的元素：</p><ul><li>纯表现的元素：basefont，big，center，font, s，strike，tt，u;</li><li>对可用性产生负面影响的元素：frame，frameset，noframes</li></ul></li><li><p>支持HTML5新标签：</p><ul><li>IE8/IE7/IE6支持通过document.createElement方法产生的标签，</li><li>可以利用这一特性让这些浏览器支持HTML5新标签，浏览器支持新标签后，还需要添加标签默认的样式</li><li>当然也可以直接使用成熟的框架、比如html5shim</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[if lt IE 9]&gt;</span><br><span class="line">&lt;script&gt; src=&quot;http://html5shim.googlecode.com/svn</span><br><span class="line">/trunk/html5.js&quot;&lt;/script&gt;</span><br><span class="line"> &lt;![endif]--&gt;</span><br></pre></td></tr></table></figure><ul><li>如何区分HTML5： DOCTYPE声明\新增的结构元素\功能元素</li></ul><p><strong>简述一下你对HTML语义化的理解？</strong></p><ul><li>用正确的标签做正确的事情。</li><li>html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;</li><li>即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;</li><li>搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;</li><li>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解</li></ul><p><strong>HTML5的离线储存怎么使用，工作原理能不能解释一下？</strong></p><ul><li>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件</li><li><p>原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示</p></li><li><p>如何使用：</p><ul><li>页面头部像下面一样加入一个manifest的属性</li><li>在cache.manifest文件的编写离线存储的资源</li><li>在离线状态时，操作window.applicationCache进行需求实现</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line">#v0.11</span><br><span class="line">CACHE:</span><br><span class="line">js/app.js</span><br><span class="line">css/style.css</span><br><span class="line">NETWORK:</span><br><span class="line">resourse/logo.png</span><br><span class="line">FALLBACK:</span><br><span class="line">/ /offline.html</span><br></pre></td></tr></table></figure><p><strong>浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？</strong></p><ul><li>在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储</li><li>离线的情况下，浏览器就直接使用离线存储的资源</li></ul><p><strong>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</strong></p><ul><li>cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。</li><li>cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。</li><li><p>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</p></li><li><p>存储大小：</p><ul><li>cookie数据大小不能超过4k。</li><li>sessionStorage和localStorage </li><li>虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li></ul></li><li><p>有期时间：</p><ul><li>localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；</li><li>sessionStorage  数据在当前浏览器窗口关闭后自动删除。</li><li>cookie   设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</li></ul></li></ul><p><strong>iframe有那些缺点？</strong></p><ul><li>iframe会阻塞主页面的Onload事件</li><li>搜索引擎的检索程序无法解读这种页面，不利于SEO;</li><li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</li><li>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript</li><li>动态给iframe添加src属性值，这样可以绕开以上两个问题</li></ul><p><strong>Label的作用是什么？是怎么用的？</strong></p><ul><li>label标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;label for=&quot;Name&quot;&gt;Number:&lt;/label&gt;</span><br><span class="line">&lt;input type=“text“name=&quot;Name&quot; id=&quot;Name&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;label&gt;Date:&lt;input type=&quot;text&quot; name=&quot;B&quot;/&gt;&lt;/label&gt;</span><br></pre></td></tr></table></figure><p><strong>HTML5的form如何关闭自动完成功能？</strong></p><ul><li>给不想要提示的 form 或某个 input 设置为 autocomplete=off。</li></ul><p><strong>如何实现浏览器内多个标签页之间的通信? (阿里)</strong></p><ul><li>WebSocket、SharedWorker</li><li>也可以调用localstorge、cookies等本地存储方式</li><li>localstorge另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件,我们通过监听事件，控制它的值来进行页面信息通信；</li><li>注意quirks：Safari 在无痕模式下设置localstorge值时会抛出 QuotaExceededError 的异常；</li></ul><p><strong>webSocket如何兼容低浏览器？(阿里)</strong></p><ul><li>Adobe Flash Socket 、</li><li>ActiveX HTMLFile (IE) 、</li><li>基于 multipart 编码发送 XHR 、</li><li>基于长轮询的 XHR</li></ul><p><strong>页面可见性（Page Visibility API） 可以有哪些用途？</strong></p><ul><li>通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;</li><li>在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放</li></ul><p><strong>如何在页面上实现一个圆形的可点击区域？</strong></p><ul><li>map+area或者svg</li><li>border-radius</li><li>纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等</li></ul><p><strong>实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果</strong></p><ul><li><code>&lt;div style=&quot;height:1px;overflow:hidden;background:red&quot;&gt;&lt;/div&gt;</code></li></ul><p><strong>网页验证码是干嘛的，是为了解决什么安全问题</strong></p><ul><li>区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水</li><li>有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试</li></ul><p><strong>title与h1的区别、b与strong的区别、i与em的区别？</strong></p><ul><li>title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响</li><li><p>strong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：<strong>会重读，而<B>是展示强调内容</p></li><li><p>i内容展示为斜体，em表示强调的文本；</p></li><li>Physical Style Elements – 自然样式标签 b, i, u, s, pre</li><li>Semantic Style Elements – 语义样式标签 strong, em, ins, del, code</li></ul><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><hr><p><strong>介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</strong></p><ul><li>有两种， IE 盒子模型、W3C 盒子模型；</li><li>盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；</li><li>区 别： IE的content部分把 border 和 padding计算了进去;</li></ul><p><strong>CSS选择符有哪些？哪些属性可以继承？</strong></p><ul><li>id选择器（ # myid）</li><li>类选择器（.myclassname）</li><li>标签选择器（div, h1, p）</li><li>相邻选择器（h1 + p）</li><li>子选择器（ul &gt; li）</li><li>后代选择器（li a）</li><li>通配符选择器（ * ）</li><li>属性选择器（a[rel = “external”]）</li><li><p>伪类选择器（a:hover, li:nth-child）</p></li><li><p>可继承的样式： font-size font-family color, UL LI DL DD DT</p></li><li>不可继承的样式：border padding margin width height</li></ul><p><strong>CSS优先级算法如何计算？</strong></p><ul><li>优先级就近原则，同权重情况下样式定义最近者为准</li><li><p>载入样式以最后载入的定位为准</p></li><li><p>优先级为:</p><ul><li>同权重: 内联样式表（标签内部）&gt; 嵌入样式表（当前文件中）&gt; 外部样式表（外部文件中）。</li><li>!important &gt;  id &gt; class &gt; tag</li><li>important 比 内联优先级高</li></ul></li></ul><p><strong>CSS3新增伪类有那些？</strong></p><ul><li>p:first-of-type    选择属于其父元素的首个 <p> 元素的每个 <p> 元素。</li><li>p:last-of-type    选择属于其父元素的最后 <p> 元素的每个 <p> 元素。</li></ul><ul><li>p:only-of-type    选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。</li><li>p:only-child        选择属于其父元素的唯一子元素的每个 <p> 元素。</li><li><p>p:nth-child(2)    选择属于其父元素的第二个子元素的每个 <p> 元素。</p></li><li><p>:after            在元素之前添加内容,也可以用来做清除浮动。</p></li><li>:before            在元素之后添加内容</li><li>:enabled          </li><li>:disabled         控制表单控件的禁用状态。</li><li>:checked        单选框或复选框被选中</li></ul><p><strong>如何居中div？</strong></p><ul><li>水平居中：给div设置一个宽度，然后添加margin:0 auto属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">width:200px;</span><br><span class="line">margin:0 auto;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>让绝对定位的div居中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">position: absolute;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 300px;</span><br><span class="line">margin: auto;</span><br><span class="line">top: 0;</span><br><span class="line">left: 0;</span><br><span class="line">bottom: 0;</span><br><span class="line">right: 0;</span><br><span class="line">background-color: pink;/* 方便看效果 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>水平垂直居中一<ul><li>确定容器的宽高 宽500 高 300 的层</li><li>设置层的外边距</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">position: relative;/* 相对定位或绝对定位均可 */</span><br><span class="line">width:500px;</span><br><span class="line">height:300px;</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">margin: -150px 0 0 -250px;     /* 外边距为自身宽高的一半 */</span><br><span class="line">background-color: pink; /* 方便看效果 */</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>水平垂直居中二<ul><li>未知容器的宽高，利用 <code>transform</code> 属性</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">position: absolute;/* 相对定位或绝对定位均可 */</span><br><span class="line">width:500px;</span><br><span class="line">height:300px;</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">transform: translate(-50%, -50%);</span><br><span class="line">background-color: pink; /* 方便看效果 */</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>水平垂直居中三</p><ul><li>利用 flex 布局</li><li>实际使用时应考虑兼容性</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">display: flex;</span><br><span class="line">align-items: center; /* 垂直居中 */</span><br><span class="line">justify-content: center;/* 水平居中 */</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.container div &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: pink;/* 方便看效果 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>display有哪些值？说明他们的作用。</strong></p><ul><li>block           块类型。默认宽度为父元素宽度，可设置宽高，换行显示。</li><li>none            缺省值。象行内元素类型一样显示。</li><li>inline          行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示</li><li>inline-block  默认宽度为内容宽度，可以设置宽高，同行显示。</li><li>list-item       象块类型元素一样显示，并添加样式列表标记。</li><li>table           此元素会作为块级表格来显示。</li><li>inherit         规定应该从父元素继承 display 属性的值</li></ul><p><strong>position的值relative和absolute定位原点是？</strong></p><ul><li>absolute<ul><li>生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。</li></ul></li><li>fixed （老IE不支持）<ul><li>生成绝对定位的元素，相对于浏览器窗口进行定位。</li></ul></li><li>relative<ul><li>生成相对定位的元素，相对于其正常位置进行定位。</li></ul></li><li>static<ul><li>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。</li></ul></li><li>inherit<ul><li>规定从父元素继承 position 属性的值</li></ul></li></ul><p><strong>CSS3有哪些新特性？</strong></p><ul><li>新增各种CSS选择器    （: not(.input)：所有 class 不是“input”的节点）</li><li>圆角            （border-radius:8px）</li><li>多列布局        （multi-column layout）</li><li>阴影和反射    （Shadow\Reflect）</li><li>文字特效        （text-shadow、）</li><li>文字渲染        （Text-decoration）</li><li>线性渐变        （gradient）</li><li>旋转             （transform）</li><li>缩放,定位,倾斜,动画,多背景</li><li>例如:transform:\scale(0.85,0.90)\ translate(0px,-30px)\ skew(-9deg,0deg)\Animation:</li></ul><p><strong>请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？</strong></p><ul><li>一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸到占用可用的空间</li><li>较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现</li><li>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。</li><li>它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”</li><li>常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做局中，能对不同屏幕大小自适应</li><li>在布局上有了比以前更加灵活的空间</li></ul><p><strong>用纯CSS创建一个三角形的原理是什么？</strong></p><ul><li>把上、左、右三条边隐藏掉（颜色设为 transparent）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#demo &#123;</span><br><span class="line">  width: 0;</span><br><span class="line">  height: 0;</span><br><span class="line">  border-width: 20px;</span><br><span class="line">  border-style: solid;</span><br><span class="line">  border-color: transparent transparent red transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一个满屏 品 字布局 如何设计?</strong></p><ul><li>简单的方式：<ul><li>上面的div宽100%，</li><li>下面的两个div分别宽50%，</li><li>然后用float或者inline使其不换行即可</li></ul></li></ul><p><strong>css多列等高如何实现？</strong></p><ul><li>利用padding-bottom|margin-bottom正负值相抵；</li><li>设置父容器设置超出隐藏（overflow:hidden），这样子父容器的高度就还是它里面的列没有设定padding-bottom时的高度</li><li>当它里面的任 一列高度增加了，则父容器的高度被撑到里面最高那列的高度</li><li>其他比这列矮的列会用它们的padding-bottom补偿这部分高度差</li></ul><p><strong>经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧</strong></p><ul><li>png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8</li><li>浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一</li><li>IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大</li><li>浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}</li><li>这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——<em>display:inline;将其转化为行内属性。(</em>这个符号只有ie6会识别)</li><li>渐进识别的方式，从总体中逐渐排除局部</li><li>首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来。</li><li>接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.bb&#123;</span><br><span class="line">      background-color:red;/*所有识别*/</span><br><span class="line">      background-color:#00deff\9; /*IE6、7、8识别*/</span><br><span class="line">      +background-color:#a200ff;/*IE6、7识别*/</span><br><span class="line">      _background-color:#1e0bd1;/*IE6识别*/</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>IE下,可以使用获取常规属性的方法来获取自定义属性,也可以使用getAttribute()获取自定义属性;</li><li>Firefox下,只能使用getAttribute()获取自定义属性<ul><li>解决方法:统一通过getAttribute()获取自定义属性。</li></ul></li></ul><ul><li>IE下,even对象有x,y属性,但是没有pageX,pageY属性</li><li>Firefox下,event对象有pageX,pageY属性,但是没有x,y属性</li><li><p>解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。</p></li><li><p>Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,</p></li><li><p>可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。</p></li><li><p>超链接访问过后hover样式就不出现了。被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:</p></li><li><code>L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}</code></li></ul><p><strong>li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</strong></p><ul><li>行框的排列会受到中间空白（回车\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了</li></ul><p><strong>为什么要初始化CSS样式</strong></p><ul><li>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异</li><li>当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化</li><li>最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议）</li></ul><p><strong>absolute的containing block(容器块)计算方式跟正常流有什么不同？</strong></p><ul><li><p>无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：</p></li><li><p>1、若此元素为 inline 元素，则 containing block为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形；</p></li><li><p>2、否则,则由这个祖先元素的 padding box 构成。如果都找不到，则为 initial containing block。</p></li><li><p>补充：</p><ul><li><ol><li>static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分）</li></ol></li><li><ol><li>absolute: 向上找最近的定位为absolute/relative的元素</li></ol></li><li><ol><li>fixed: 它的containing block一律为根元素(html/body)，根元素也是initial containing block</li></ol></li></ul></li></ul><p><strong>CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？</strong></p><ul><li>对于普通元素visibility:collapse;会将元素完全隐藏,不占据页面布局空间,与display:none;表现相同.</li><li>如果目标元素为table,visibility:collapse;将table隐藏,但是会占据页面布局空间.</li><li>仅在Firefox下起作用,IE会显示元素,Chrome会将元素隐藏,但是占据空间.</li></ul><p><strong>position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？</strong></p><ul><li>如果元素的display为none,那么元素不被渲染,position,float不起作用,</li><li>如果元素拥有position:absolute;或者position:fixed;属性那么元素将为绝对定位,float不起作用.</li><li>如果元素float属性不是none,元素会脱离文档流,根据float属性值来显示.有浮动,绝对定位,inline-block属性的元素,margin不会和垂直方向上的其他元素margin折叠</li></ul><p><strong>对BFC规范(块级格式化上下文：block formatting context)的理解？</strong></p><ul><li>一个页面是由很多个 Box 组成的,元素的类型和 display 属性,决定了这个 Box 的类型。不同类型的 Box,会参与不同的 Formatting Context（决定如何渲染文档的容器）,因此Box内的元素会以不同的方式渲染,也就是说BFC内部的元素和外部的元素不会互相影响</li></ul><p><strong>css定义的权重</strong></p><ul><li>以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*权重为1*/</span><br><span class="line">div&#123;</span><br><span class="line">&#125;</span><br><span class="line">/*权重为10*/</span><br><span class="line">.class1&#123;</span><br><span class="line">&#125;</span><br><span class="line">/*权重为100*/</span><br><span class="line">#id1&#123;</span><br><span class="line">&#125;</span><br><span class="line">/*权重为100+1=101*/</span><br><span class="line">#id1 div&#123;</span><br><span class="line">&#125;</span><br><span class="line">/*权重为10+1=11*/</span><br><span class="line">.class1 div&#123;</span><br><span class="line">&#125;</span><br><span class="line">/*权重为10+10+1=21*/</span><br><span class="line">.class1 .class2 div&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现</li></ul><p><strong>请解释一下为什么需要清除浮动？清除浮动的方式</strong></p><ul><li>清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示</li><li>父级div定义height</li><li>父级div 也一起浮动；</li><li>常规的使用一个class；</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:before, .clearfix:after &#123;</span><br><span class="line">    content: &quot; &quot;;</span><br><span class="line">    display: table;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SASS编译的时候，浮动元素的父级div定义伪类:after</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&amp;:after,&amp;:before&#123;</span><br><span class="line">    content: &quot; &quot;;</span><br><span class="line">    visibility: hidden;</span><br><span class="line">    display: block;</span><br><span class="line">    height: 0;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>解析原理：</p><ul><li>display:block 使生成的元素以块级元素显示,占满剩余空间</li><li>height:0 避免生成内容破坏原有布局的高度。</li><li>visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互</li><li>通过 content:”.”生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有经典的 content:”.”,有些版本可能content 里面内容为空,一丝冰凉是不推荐这样做的,firefox直到7.0 content:”” 仍然会产生额外的空隙</li><li>zoom：1 触发IE hasLayout</li></ul></li><li><p>通过分析发现，除了clear：both用来闭合浮动的，其他代码无非都是为了隐藏掉content生成的内容，这也就是其他版本的闭合浮动为什么会有font-size：0，line-height：0</p></li></ul><p><strong>什么是外边距合并？</strong></p><ul><li>外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距</li><li>合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</li></ul><p><strong>zoom:1的清除浮动原理?</strong></p><ul><li>清除浮动，触发hasLayout；</li><li>Zoom属性是IE浏览器的专有属性，它可以设置或检索对象的缩放比例。解决ie下比较奇葩的bug</li><li>譬如外边距（margin）的重叠，浮动清除，触发ie的haslayout属性等</li></ul><p><strong>移动端的布局用过媒体查询吗？</strong></p><ul><li><p>假设你现在正用一台显示设备来阅读这篇文章，同时你也想把它投影到屏幕上，或者打印出来，而显示设备、屏幕投影和打印等这些媒介都有自己的特点，CSS就是为文档提供在不同媒介上展示的适配方法</p></li><li><!-- link元素中的CSS媒体查询 --><ul><li>当媒体查询为真时，相关的样式表或样式规则会按照正常的级联规被应用。</li><li>当媒体查询返回假， <link> 标签上带有媒体查询的样式表 仍将被下载 （只不过不会被应用）</li></ul></li><li><link rel="stylesheet" media="(max-width: 800px)" href="example.css" /></li><li><!-- 样式表中的CSS媒体查询 --><ul><li>包含了一个媒体类型和至少一个使用 宽度、高度和颜色等媒体属性来限制样式表范围的表达式</li><li>CSS3加入的媒体查询使得无需修改内容便可以使样式应用于某些特定的设备范围</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">@media (min-width: 700px) and (orientation: landscape)&#123;</span><br><span class="line">  .sidebar &#123;</span><br><span class="line">    display: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>使用 CSS 预处理器吗？喜欢那个？</strong></p><ul><li>SASS (SASS、LESS没有本质区别，只因为团队前端都是用的SASS)</li></ul><p><strong>CSS优化、提高性能的方法有哪些？</strong></p><ul><li>关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）；</li><li>如果规则拥有 ID 选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）；</li><li>提取项目的通用公有样式，增强可复用性，按模块编写组件；增强项目的协同开发性、可维护性和可扩展性;</li><li>使用预处理工具或构建工具（gulp对css进行语法检查、自动补前缀、打包压缩、自动优雅降级）</li></ul><p><strong>浏览器是怎样解析CSS选择器的？</strong></p><ul><li>样式系统从关键选择器开始匹配，然后左移查找规则选择器的祖先元素</li><li>只要选择器的子树一直在工作，样式系统就会持续左移，直到和规则匹配，或者是因为不匹配而放弃该规则</li></ul><p><strong>margin和padding分别适合什么场景使用？</strong></p><ul><li>margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。</li><li>margin用于布局分开元素使元素与元素互不相干；</li><li>padding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段</li></ul><p><strong>::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用</strong></p><ul><li>单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。（伪元素由双冒号和伪元素名称组成）</li><li>双冒号是在当前规范中引入的，用于区分伪类和伪元素。不过浏览器需要同时支持旧的已经存在的伪元素写法</li><li>比如:first-line、:first-letter、:before、:after等，而新的在CSS3中引入的伪元素则不允许再支持旧的单冒号的写法。</li><li>想让插入的内容出现在其它内容前，使用::before，否者，使用::after；在代码顺序上，::after生成的内容也比::before生成的内容靠后。</li><li>如果按堆栈视角，::after生成的内容会在::before生成的内容之上</li></ul><p><strong>如何修改chrome记住密码后自动填充表单的黄色背景 ？</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill &#123;</span><br><span class="line">  background-color: rgb(250, 255, 189); /* #FAFFBD; */</span><br><span class="line">  background-image: none;</span><br><span class="line">  color: rgb(0, 0, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>设置元素浮动后，该元素的display值是多少？</strong></p><ul><li>自动变成了 display:block</li></ul><p><strong>怎么让Chrome支持小于12px 的文字？</strong></p><ul><li>用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观</li><li>使用12px及12px以上字体大小：为了兼容各大主流浏览器，建议设计美工图时候设置大于或等于12px的字体大小，如果是接单的这个时候就需要给客户讲解小于12px浏览器不兼容等事宜</li><li>继续使用小于12px字体大小样式设置：如果不考虑chrome可以不用考虑兼容，同时在设置小于12px对象设置-webkit-text-size-adjust:none，做到最大兼容考虑</li><li>使用12px以上字体：为了兼容、为了代码更简单 从新考虑权重下兼容性。</li></ul><p><strong>让页面里的字体变清晰，变细用CSS怎么做？</strong></p><ul><li>-webkit-font-smoothing: antialiased;</li></ul><p><strong>font-style属性可以让它赋值为“oblique” oblique是什么意思？</strong></p><ul><li>倾斜的字体样式</li></ul><p><strong>position:fixed;在android下无效怎么处理？</strong></p><ul><li>fixed的元素是相对整个页面固定位置的，你在屏幕上滑动只是在移动这个所谓的viewport，原来的网页还好好的在那，fixed的内容也没有变过位置，</li><li>所以说并不是iOS不支持fixed，只是fixed的元素不是相对手机屏幕固定的</li><li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot;/&gt;</code></li></ul><p><strong>如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</strong></p><ul><li>多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms</li></ul><p><strong>display:inline-block 什么时候会显示间隙？(携程)</strong></p><ul><li>移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing</li></ul><p><strong>什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）</strong></p><ul><li>如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，所以不如隔离开。</li><li>因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的</li><li>同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，提高了webserver的http请求的解析速度。</li></ul><p><strong>什么是CSS 预处理器 / 后处理器？</strong></p><ul><li>预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。</li><li>后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。</li></ul></script></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 面试复习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS复习知识点</title>
      <link href="/2017/01/01/2017-01-01-CSS%E5%A4%8D%E4%B9%A0%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <content type="html"><![CDATA[<p>博客归档<br><a id="more"></a></p><h1 id="布局定位position"><a href="#布局定位position" class="headerlink" title="布局定位position"></a>布局定位position</h1><p>[<a href="http://www.cnblogs.com/syfwhu/p/4319236.html]" target="_blank" rel="noopener">http://www.cnblogs.com/syfwhu/p/4319236.html]</a></p><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>解释下浮动和它的工作原理。<br>关于浮动我们需要了解，浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。要想使元素浮动，必须为元素设置一个宽度（width）。虽然浮动元素不是文档流之中，但是它浮动后所处的位置依然是在浮动之前的水平方向上。由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样，下面的元素填补原来的位置。有些元素会在浮动元素的下方，但是这些元素的内容并不一定会被浮动的元素所遮盖，对内联元素进行定位时，这些元素会考虑浮动元素的边界，会围绕着浮动元素放置。也可以把浮动元素想象成是被块元素忽略的元素，而内联元素会关注浮动元素的。  </p><ol><li>什么是BFC，作用有哪些？哪些情况下会触发BFC？</li></ol><p>BFC（块级格式化上下文），是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面元素，反之亦然。它与普通的块框类似，但不同之处在于:<br>（1）可以阻止元素被浮动元素覆盖。<br>（2）可以包含浮动元素。<br>（3）可以阻止margin重叠。<br>满足下列条件之一就可触发BFC：<br>【1】根元素，即HTML元素<br>【2】float的值不为none<br>【3】overflow的值不为visible<br>【4】display的值为inline-block、table-cell、table-caption<br>【5】position的值为absolute或fixed</p><p>32.在书写高效CSS时会有哪些问题需要考虑？<br>1.样式是：从右向左的解析一个选择器；<br>2.ID最快，Universal最慢有四种类型的key selector，解析速度由快到慢依次是：ID、class、tag和universal ；<br>3.不要tag-qualify（永远不要这样做ul#main-navigation{}ID已经是唯一的，不需要Tag来标识，这样做会让选择器变慢。）；<br>4.后代选择器最糟糕（换句话说，下面这个选择器是很低效的：html body ul li a{}）；<br>5.想清楚你为什么这样写；<br>6.CSS3的效率问题（CSS3选择器（比如:nth-child）能够漂亮的定位我们想要的元素，又能保证我们的CSS整洁易读。但是这些神奇的选择器会浪费很多的浏览器资源。）；<br>7.我们知道#ID速度是最快的，那么我们都用ID，是不是很快。但是我们不应该为了效率而牺牲可读性和可维护性。<br>33.使用CSS预处理器的优缺点有哪些？<br>     LESS&amp;SassLESS是受Sass启发而开发的工具，它列出了如下开发的理由：</p><pre><code>“为什么要开发一个Sass的替代品呢？原因很简单：首先是语法。Sass的一个关键特性是缩进式的语法，这种语法可以产生柱式外观的代码。但是你需要花费时间学习一门新的语法以及重新构建你现在的样式表。LESS给CSS带来了很多特性，使得LESS能够和CSS无缝地紧密结合在一起。因此，你可以平滑地由CSS迁移到LESS，如果你只是对使用变量或者操作感兴趣的话，你不需要学习一整门全新的语言。” StylusStylus相对前两者较新，可以看官方文档介绍的功能。</code></pre><p>1.来自NodeJS社区，所以和NodeJS走得很近，与JavaScript联系非常紧密。还有专门JavaScript API：<a href="http://learnboost.github.io/stylus/docs/js.html；" target="_blank" rel="noopener">http://learnboost.github.io/stylus/docs/js.html；</a><br>2.支持Ruby之类等等框架；<br>3.更多更强大的支持和功能总结：Sass看起来在提供的特性上占有优势，但是LESS能够让开发者平滑地从现存CSS文件过渡到LESS，而不需要像Sass那样需要将CSS文件转换成Sass格式。Stylus功能上更为强壮，和js联系更加紧密。<br>34.如果设计中使用了非标准的字体，你该如何去实现？<br>所谓的标准字体是多数机器上都会有的，或者即使没有也可以由默认字体替代的字体。</p><p>方法：</p><p>用图片代替<br>web fonts在线字库，如Google Webfonts，Typekit等等；<a href="http://www.chinaz.com/free/2012/0815/269267.shtml；" target="_blank" rel="noopener">http://www.chinaz.com/free/2012/0815/269267.shtml；</a><br>@font-face，Webfonts(字体服务例如：Google Webfonts，Typekit等等。)</p>]]></content>
      
      <categories>
          
          <category> 页面重构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试复习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML复习知识点</title>
      <link href="/2017/01/01/2017-01-01-HTML%E5%A4%8D%E4%B9%A0%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <content type="html"><![CDATA[<p>博客归档<br><a id="more"></a></p><p>11.请谈一下你对网页标准和标准制定机构重要性的理解。<br>w3c存在的意义就是让浏览器兼容性问题尽量小，首先是他们对浏览器开发者的约束，然后是对开发者的约束。</p><p>12.什么是FOUC（无样式内容闪烁）？你如何来避免FOUC？<br>FOUC(Flash Of Unstyled Content)–文档样式闪烁</p><p>&lt;style type=”text/css”media=”all”&gt;@import”../fouc.css”;而引用CSS文件的@import就是造成这个问题的罪魁祸首。IE会先加载整个HTML文档的DOM，然后再去导入外部的CSS文件，因此，在页面DOM加载完成到CSS导入完成中间会有一段时间页面上的内容是没有样式的，这段时间的长短跟网速，电脑速度都有关系。解决方法简单的出奇，只要在<head>之间加入一个<link>或者<script>元素就可以了。</p><p>13.doctype（文档类型）的作用是什么？你知道多少种文档类型？<br>此标签可告知浏览器文档使用哪种HTML或XHTML规范。该标签可声明三种DTD类型，分别表示严格版本、过渡版本以及基于框架的HTML文档。</p><p>HTML 4.01规定了三种文档类型：Strict、Transitional以及Frameset。</p><p>XHTML 1.0规定了三种XML文档类型：Strict、Transitional以及Frameset。</p><p>Standards（标准）模式（也就是严格呈现模式）用于呈现遵循最新标准的网页，而Quirks（包容）模式（也就是松散呈现模式或者兼容模式）用于呈现为传统浏览器而设计的网页。</p><p>14.浏览器标准模式和怪异模式之间的区别是什么？<br>W3C标准推出以后，浏览器都开始采纳新标准，但存在一个问题就是如何保证旧的网页还能继续浏览，在标准出来以前，很多页面都是根据旧的渲染方法编写的，如果用的标准来渲染，将导致页面显示异常。为保持浏览器渲染的兼容性，使以前的页面能够正常浏览，浏览器都保留了旧的渲染方法（如：微软的IE）。这样浏览器渲染上就产生了Quircks mode和Standars mode，两种渲染方法共存在一个浏览器上。IE盒子模型和标准W3C盒子模型：ie的width包括：padding\border。标准的width不包括：padding\border</p><p> 在js中如何判断当前浏览器正在以何种方式解析？<br>         document对象有个属性compatMode,它有两个值：BackCompat对应quirks mode，CSS1Compat对应strict mode。</p><p>15.使用XHTML的局限有哪些？<br>XHTML 与HTML的区别为：</p><p>XHTML 元素必须被正确地嵌套。<br>XHTML 元素必须被关闭。<br>标签名必须用小写字母。<br>XHTML 文档必须拥有根元素。<br>局限：</p><p>所有的 XHTML 元素都必须被正确地嵌套，XHTML 必须拥有良好的结构，所有的标签必须小写，并且所有的 XHTML 元素必须被关闭。所有的 XHTML 文档必须拥有 DOCTYPE 声明，并且 html、head、title 和 body 元素必须存在。虽然代码更加的优雅，但缺少容错性，不利于快速开发。</p></script></head></p>]]></content>
      
      <categories>
          
          <category> 页面重构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试复习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入JavaScript-类型和值-第三部分</title>
      <link href="/2017/01/01/2017-01-01-%E6%B7%B1%E5%85%A5%E7%B3%BB%E5%88%97-%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%80%BC(3)/"/>
      <content type="html"><![CDATA[<h1 id="深入JavaScript-类型和值-3"><a href="#深入JavaScript-类型和值-3" class="headerlink" title="深入JavaScript-类型和值(3)"></a>深入JavaScript-类型和值(3)</h1><p>题目细节<br><a id="more"></a></p><h2 id="补充细节"><a href="#补充细节" class="headerlink" title="补充细节"></a>补充细节</h2><h3 id="typeof-undefined"><a href="#typeof-undefined" class="headerlink" title="typeof undefined"></a>typeof undefined</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">typeof</span> a; <span class="comment">// "undefined"</span></span><br><span class="line"><span class="keyword">typeof</span> b; <span class="comment">// "undefined"</span></span><br></pre></td></tr></table></figure><blockquote><p>typeof运算符返回”undefined”，尽管这个变量是“undeclared”（或“not defined”，未定义的变量）。请注意，当我们执行typeof b的时候没有抛出任何错误，尽管b是一个未声明的变量。这是typeof的特殊安全保护机制造成的。<br>如果typeof针对未声明的变量返回“undeclared”，而不是将两种完全不同情况混为一谈都返回“undefined”，这该多好啊！Nevertheless, this safety guard is a useful feature when dealing with JavaScript in the browser, where multiple script files can load variables into the shared global namespace.</p></blockquote><p>可以用来防止抛出ReferenceError</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// oops, this would throw an error!</span></span><br><span class="line"><span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"Debugging is starting"</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// this is a safe existence check</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> DEBUG !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"Debugging is starting"</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h2><p>not a number</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="literal">NaN</span> != <span class="literal">NaN</span>;<span class="comment">// true</span></span><br><span class="line"><span class="literal">NaN</span> !== <span class="literal">NaN</span>;<span class="comment">// true</span></span><br><span class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span>;</span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>;</span><br></pre></td></tr></table></figure><h3 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h3><ul><li>利用唯一一个非自反值来判断</li><li>利用全局函数window.isNaN来判断</li></ul><h2 id="内建函数-原生函数"><a href="#内建函数-原生函数" class="headerlink" title="内建函数(原生函数)"></a>内建函数(原生函数)</h2><p>所有typeof 返回值为”object”的对象(如数组)都包含一个内部属性[[Class]]<br>这个属性无法直接访问<br>通过Object.prototype.toString来查看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call( [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// "[object Array]"</span></span><br><span class="line"><span class="comment">// 值得注意的是,基本类型值也会自动包装获得相同的情况</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>) <span class="comment">// "[object Boolean]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">42</span>) <span class="comment">// "[object Number]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">"abc"</span>) <span class="comment">// "[object String]"</span></span><br></pre></td></tr></table></figure><h3 id="字符串和字符串对象"><a href="#字符串和字符串对象" class="headerlink" title="字符串和字符串对象"></a>字符串和字符串对象</h3><blockquote><p>基本字符串和字符串对象的区别<br>请注意区分 JavaScript 字符串对象和基本字符串值 . ( 对于 Boolean 和Numbers 也同样如此.)</p></blockquote><p>字符串字面量 (通过单引号或双引号定义) 和 直接调用 String 方法(没有通过 new 生成字符串对象实例)的字符串都是基本字符串。JavaScript会自动将基本字符串转换为字符串对象，只有将基本字符串可转化为字符串对象之后才可以使用字符串对象的方法。当基本字符串需要调用一个字符串对象才有的方法或者查询值的时候(基本字符串是没有这些方法的)，JavaScript 会自动将基本字符串转化为字符串对象并且调用相应的方法或者执行查询。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入系列 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入JavaScript-类型和值-类型转换</title>
      <link href="/2017/01/01/2017-01-01-%E6%B7%B1%E5%85%A5-%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%80%BC-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <content type="html"><![CDATA[<h1 id="深入JavaScript-类型转换"><a href="#深入JavaScript-类型转换" class="headerlink" title="深入JavaScript-类型转换"></a>深入JavaScript-类型转换</h1><blockquote><p>闇に惑いし哀れな影よ。你能控制，那是好的，你不能控制，那才是坏的。</p></blockquote><p>人们对JavaScript中最大的偏见,最多的指责,莫过于这强制类型转换了。<br>这里我想说的是，代码是给人看的，而不是仅仅给机器进行执行的。<br>在编码过程中尽可能将类型转换表达清楚，以免给别人留坑。<br>而不是为了在代码中”花式炫技”为了类型转换而转换，反而适得其反。</p><p><strong>你能控制，且能让别人看懂的，那就是优秀的</strong></p><a id="more"></a><h2 id="类型转换是什么？"><a href="#类型转换是什么？" class="headerlink" title="类型转换是什么？"></a>类型转换是什么？</h2><p>我想说一个很多人都没有搞清楚的东西。<br>什么时候会发生类型转换。</p><h2 id="ToBoolean-布尔值"><a href="#ToBoolean-布尔值" class="headerlink" title="ToBoolean 布尔值"></a>ToBoolean 布尔值</h2><p>ToBoolean的expression表达式情况</p><ul><li>显式的 Boolean() 以及”显式”的 !!</li><li>if(expression)  while(expression) for(..;expression;..;) 中的条件判断</li><li>三元表达式 expression?a:b</li><li>逻辑运算符中的 逻辑或，逻辑与 ||  &amp;&amp;  左边的操作数 ！！请注意只有左边</li></ul><h3 id="falsy-value-假值"><a href="#falsy-value-假值" class="headerlink" title="falsy value 假值"></a>falsy value 假值</h3><p>JavaScript中的值可以分为下面两类</p><ul><li>1.可以被强制类型转换为false的值</li><li>2.其他<br>牢记5大假值</li><li>undefined</li><li>null</li><li>false</li><li>+-0 NaN</li><li>“”<br>请尤其小心谨慎下面这些容易发生误会的真值</li><li>“false”</li><li>“0”</li><li>“‘’”</li><li>[]</li><li>{}</li><li>[0]</li><li>function(){}</li></ul><p>以上值中最坑的应该是[] {},他虽然是真值,但是在ToPromitive解析中却返回的是假值，下面会讲到这个问题</p><h3 id="补充说明-与-amp-amp"><a href="#补充说明-与-amp-amp" class="headerlink" title="补充说明 || 与 &amp;&amp;"></a>补充说明 || 与 &amp;&amp;</h3><p>JavaScript中的逻辑运算符和别的语言有一些重要的差别<br>它返回的并不是布尔值,可能你用过很多次都理所当然的认为是,其实只是返回后在条件表达式中理所当然的进行了隐式的布尔转换<br>它的返回值是两个操作数的一个,即选择两个操作数中的一个,所以也有人称这个运算符为选择运算符</p><p>首先对第一个操作数Toboolean后执行条件判断</p><ul><li>|| 如果true 返回第一个,否则第二个</li><li>&amp;&amp; 如果false 返回第一个,否则第二个</li></ul><h3 id="宽松相等-和严格相等"><a href="#宽松相等-和严格相等" class="headerlink" title="宽松相等== 和严格相等 ==="></a>宽松相等== 和严格相等 ===</h3><blockquote><p>一个常见的误区是 == 检查值是否相等, === 检查值和类型是否相等。听起来蛮有道理，但是远不够准确。<br>一个更常见的见解是把==和以上提到的真值假值混淆在了一起。</p></blockquote><p><strong>“==允许在相等比较中进行强制类型转换,而===不允许”</strong><br>这里涉及到一个很重要,但是总是有人少根筋忘记的事情。<br>a与b类型不等的时候，到底是什么类型强制转换另一种类型进行比较？</p><p>以下规则均套路不同类型的宽松比较情况</p><p>Number&gt; String<br>Number&gt; Boolean<br>ToPromitive&gt;Object</p><p><strong>简单说数字最大,但是数字的比较最为严格</strong></p><p>1.字符串和布尔值在比较中均转换toNumber继续比较<br>// 个人建议 在任何情况下都不要使用 == 布尔值,因为布尔值一定会被优先转换成数字<br>2.null 与 undefined 宽松相等,可以相互进行隐式转换<br>//但是和所谓的 “” false 不等,原因见1<br>3.对象在比较中 toprimitive操作(valueOf&gt;toString)<br>4.请时刻注意自己是在进行toNumber toBoolean toprimitive操作的哪一种<br>令人窒息的一些非常规情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"0"</span> == <span class="literal">false</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">""</span> == <span class="literal">false</span> <span class="comment">// true</span></span><br><span class="line">[] == <span class="literal">false</span> <span class="comment">// true</span></span><br><span class="line">&#123;&#125; == <span class="literal">false</span> <span class="comment">// false</span></span><br><span class="line">[] == ![]<span class="comment">// true</span></span><br><span class="line"><span class="number">2</span> == [<span class="number">2</span>]<span class="comment">// true</span></span><br><span class="line"><span class="string">""</span> == [<span class="literal">null</span>] <span class="comment">// ture 特别提醒[null] toString 返回 "" toNumber 0</span></span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>显式类型转换发生在静态类型语言的编译时<br>强制类型转换发生在动态类型语言的运行时</p><p><a href="http://dorey.github.io/JavaScript-Equality-Table/" target="_blank" rel="noopener">github上的比较记忆图表</a></p><p>ES5规范补充</p><blockquote><p>The Equals Operator ( == )</p></blockquote><p>The production EqualityExpression : EqualityExpression == RelationalExpression is evaluated as follows:</p><p>Let lref be the result of evaluating EqualityExpression.<br>Let lval be GetValue(lref).<br>Let rref be the result of evaluating RelationalExpression.<br>Let rval be GetValue(rref).<br>Return the result of performing abstract equality comparison rval == lval. (see 11.9.3).<br>11.9.2 The Does-not-equals Operator ( != )</p><p>The production EqualityExpression : EqualityExpression != RelationalExpression is evaluated as follows:</p><p>Let lref be the result of evaluating EqualityExpression.<br>Let lval be GetValue(lref).<br>Let rref be the result of evaluating RelationalExpression.<br>Let rval be GetValue(rref).<br>Let r be the result of performing abstract equality comparison rval == lval. (see 11.9.3).<br>If r is true, return false. Otherwise, return true.<br>11.9.3 The Abstract Equality Comparison Algorithm</p><p>The comparison x == y, where x and y are values, produces true or false. Such a comparison is performed as follows:</p><p>If Type(x) is the same as Type(y), then<br>If Type(x) is Undefined, return true.<br>If Type(x) is Null, return true.<br>If Type(x) is Number, then<br>If x is NaN, return false.<br>If y is NaN, return false.<br>If x is the same Number value as y, return true.<br>If x is +0 and y is −0, return true.<br>If x is −0 and y is +0, return true.<br>Return false.<br>If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions). Otherwise, return false.<br>If Type(x) is Boolean, return true if x and y are both true or both false. Otherwise, return false.<br>Return true if x and y refer to the same object. Otherwise, return false.<br>If x is null and y is undefined, return true.<br>If x is undefined and y is null, return true.<br>If Type(x) is Number and Type(y) is String,<br>return the result of the comparison x == ToNumber(y).<br>If Type(x) is String and Type(y) is Number,<br>return the result of the comparison ToNumber(x) == y.<br>If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.<br>If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).<br>If Type(x) is either String or Number and Type(y) is Object,<br>return the result of the comparison x == ToPrimitive(y).<br>If Type(x) is Object and Type(y) is either String or Number,<br>return the result of the comparison ToPrimitive(x) == y.<br>Return false.<br>NOTE 1 Given the above definition of equality:</p><p>String comparison can be forced by: “” + a == “” + b.<br>Numeric comparison can be forced by: +a == +b.<br>Boolean comparison can be forced by: !a == !b.<br>NOTE 2 The equality operators maintain the following invariants:</p><p>A != B is equivalent to !(A == B).<br>A == B is equivalent to B == A, except in the order of evaluation of A and B.<br>NOTE 3 The equality operator is not always transitive. For example, there might be two distinct String objects, each representing the same String value; each String object would be considered equal to the String value by the == operator, but the two String objects would not be equal to each other. For Example:</p><p>new String(“a”) == “a” and “a” == new String(“a”)are both true.<br>new String(“a”) == new String(“a”) is false.<br>NOTE 4 Comparison of Strings uses a simple equality test on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore Strings values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalised form.</p><p>11.9.4 The Strict Equals Operator ( === )</p><p>The production EqualityExpression : EqualityExpression === RelationalExpression is evaluated as follows:</p><p>Let lref be the result of evaluating EqualityExpression.<br>Let lval be GetValue(lref).<br>Let rref be the result of evaluating RelationalExpression.<br>Let rval be GetValue(rref).<br>Return the result of performing the strict equality comparison rval === lval. (See 11.9.6)<br>11.9.5 The Strict Does-not-equal Operator ( !== )</p><p>The production EqualityExpression : EqualityExpression !== RelationalExpression is evaluated as follows:</p><p>Let lref be the result of evaluating EqualityExpression.<br>Let lval be GetValue(lref).<br>Let rref be the result of evaluating RelationalExpression.<br>Let rval be GetValue(rref).<br>Let r be the result of performing strict equality comparison rval === lval. (See 11.9.6)<br>If r is true, return false. Otherwise, return true.<br>11.9.6 The Strict Equality Comparison Algorithm</p><p>The comparison x === y, where x and y are values, produces true or false. Such a comparison is performed as follows:</p><p>If Type(x) is different from Type(y), return false.<br>If Type(x) is Undefined, return true.<br>If Type(x) is Null, return true.<br>If Type(x) is Number, then<br>If x is NaN, return false.<br>If y is NaN, return false.<br>If x is the same Number value as y, return true.<br>If x is +0 and y is −0, return true.<br>If x is −0 and y is +0, return true.<br>Return false.<br>If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions); otherwise, return false.<br>If Type(x) is Boolean, return true if x and y are both true or both false; otherwise, return false.<br>Return true if x and y refer to the same object. Otherwise, return false.<br>NOTE This algorithm differs from the SameValue Algorithm (9.12) in its treatment of signed zeroes and NaNs.</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入系列 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
